// <auto-generated>
// ReSharper disable All

using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Design;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlTypes;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Threading.Tasks;

namespace Hpl.HrmDatabase
{
    #region Database context interface

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public interface IAbpHplDbContext : IDisposable
    {
        DbSet<AbpAuditLog> AbpAuditLogs { get; set; } // AbpAuditLogs
        DbSet<AbpBackgroundJob> AbpBackgroundJobs { get; set; } // AbpBackgroundJobs
        DbSet<AbpDynamicEntityProperty> AbpDynamicEntityProperties { get; set; } // AbpDynamicEntityProperties
        DbSet<AbpDynamicEntityPropertyValue> AbpDynamicEntityPropertyValues { get; set; } // AbpDynamicEntityPropertyValues
        DbSet<AbpDynamicProperty> AbpDynamicProperties { get; set; } // AbpDynamicProperties
        DbSet<AbpDynamicPropertyValue> AbpDynamicPropertyValues { get; set; } // AbpDynamicPropertyValues
        DbSet<AbpEdition> AbpEditions { get; set; } // AbpEditions
        DbSet<AbpEntityChangeSet> AbpEntityChangeSets { get; set; } // AbpEntityChangeSets
        DbSet<AbpEntityChanx> AbpEntityChanges { get; set; } // AbpEntityChanges
        DbSet<AbpEntityPropertyChanx> AbpEntityPropertyChanges { get; set; } // AbpEntityPropertyChanges
        DbSet<AbpFeature> AbpFeatures { get; set; } // AbpFeatures
        DbSet<AbpLanguage> AbpLanguages { get; set; } // AbpLanguages
        DbSet<AbpLanguageText> AbpLanguageTexts { get; set; } // AbpLanguageTexts
        DbSet<AbpNotification> AbpNotifications { get; set; } // AbpNotifications
        DbSet<AbpNotificationSubscription> AbpNotificationSubscriptions { get; set; } // AbpNotificationSubscriptions
        DbSet<AbpOrganizationUnit> AbpOrganizationUnits { get; set; } // AbpOrganizationUnits
        DbSet<AbpOrganizationUnitRole> AbpOrganizationUnitRoles { get; set; } // AbpOrganizationUnitRoles
        DbSet<AbpPermission> AbpPermissions { get; set; } // AbpPermissions
        DbSet<AbpRole> AbpRoles { get; set; } // AbpRoles
        DbSet<AbpRoleClaim> AbpRoleClaims { get; set; } // AbpRoleClaims
        DbSet<AbpSetting> AbpSettings { get; set; } // AbpSettings
        DbSet<AbpTenant> AbpTenants { get; set; } // AbpTenants
        DbSet<AbpTenantNotification> AbpTenantNotifications { get; set; } // AbpTenantNotifications
        DbSet<AbpUser> AbpUsers { get; set; } // AbpUsers
        DbSet<AbpUserAccount> AbpUserAccounts { get; set; } // AbpUserAccounts
        DbSet<AbpUserClaim> AbpUserClaims { get; set; } // AbpUserClaims
        DbSet<AbpUserLogin> AbpUserLogins { get; set; } // AbpUserLogins
        DbSet<AbpUserLoginAttempt> AbpUserLoginAttempts { get; set; } // AbpUserLoginAttempts
        DbSet<AbpUserNotification> AbpUserNotifications { get; set; } // AbpUserNotifications
        DbSet<AbpUserOrganizationUnit> AbpUserOrganizationUnits { get; set; } // AbpUserOrganizationUnits
        DbSet<AbpUserRole> AbpUserRoles { get; set; } // AbpUserRoles
        DbSet<AbpUserToken> AbpUserTokens { get; set; } // AbpUserTokens
        DbSet<AbpWebhookEvent> AbpWebhookEvents { get; set; } // AbpWebhookEvents
        DbSet<AbpWebhookSendAttempt> AbpWebhookSendAttempts { get; set; } // AbpWebhookSendAttempts
        DbSet<AbpWebhookSubscription> AbpWebhookSubscriptions { get; set; } // AbpWebhookSubscriptions
        DbSet<BlackListUser> BlackListUsers { get; set; } // BlackListUser
        DbSet<CreateDisableUserManual> CreateDisableUserManuals { get; set; } // CreateDisableUserManuals
        DbSet<Customer> Customers { get; set; } // Customers
        DbSet<HplCreateUserLog> HplCreateUserLogs { get; set; } // HplCreateUserLogs
        DbSet<HplDeleteEmailDoTaoLoi> HplDeleteEmailDoTaoLois { get; set; } // HplDeleteEmailDoTaoLoi
        DbSet<HplDisableUserLog> HplDisableUserLogs { get; set; } // HplDisableUserLogs
        DbSet<HplEmailCanXoa31082021> HplEmailCanXoa31082021 { get; set; } // HplEmailCanXoa31082021
        DbSet<HplPhongBan> HplPhongBans { get; set; } // HplPhongBans
        DbSet<HplPhongBanFlatten> HplPhongBanFlattens { get; set; } // HplPhongBanFlattens
        DbSet<HplSyncLog> HplSyncLogs { get; set; } // HplSyncLogs
        DbSet<HplTestTable> HplTestTables { get; set; } // HplTestTable
        DbSet<UserAdInfo> UserAdInfoes { get; set; } // UserAdInfo

        int SaveChanges();
        int SaveChanges(bool acceptAllChangesOnSuccess);
        Task<int> SaveChangesAsync(CancellationToken cancellationToken = default(CancellationToken));
        Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default(CancellationToken));
        DatabaseFacade Database { get; }
        DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();

        EntityEntry Add(object entity);
        EntityEntry<TEntity> Add<TEntity>(TEntity entity) where TEntity : class;
        Task AddRangeAsync(params object[] entities);
        Task AddRangeAsync(IEnumerable<object> entities, CancellationToken cancellationToken = default);
        ValueTask<EntityEntry<TEntity>> AddAsync<TEntity>(TEntity entity, CancellationToken cancellationToken = default) where TEntity : class;
        ValueTask<EntityEntry> AddAsync(object entity, CancellationToken cancellationToken = default);
        void AddRange(IEnumerable<object> entities);
        void AddRange(params object[] entities);

        EntityEntry Attach(object entity);
        EntityEntry<TEntity> Attach<TEntity>(TEntity entity) where TEntity : class;
        void AttachRange(IEnumerable<object> entities);
        void AttachRange(params object[] entities);

        EntityEntry Entry(object entity);
        EntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;

        TEntity Find<TEntity>(params object[] keyValues) where TEntity : class;
        ValueTask<TEntity> FindAsync<TEntity>(object[] keyValues, CancellationToken cancellationToken) where TEntity : class;
        ValueTask<TEntity> FindAsync<TEntity>(params object[] keyValues) where TEntity : class;
        ValueTask<object> FindAsync(Type entityType, object[] keyValues, CancellationToken cancellationToken);
        ValueTask<object> FindAsync(Type entityType, params object[] keyValues);
        object Find(Type entityType, params object[] keyValues);

        EntityEntry Remove(object entity);
        EntityEntry<TEntity> Remove<TEntity>(TEntity entity) where TEntity : class;
        void RemoveRange(IEnumerable<object> entities);
        void RemoveRange(params object[] entities);

        EntityEntry Update(object entity);
        EntityEntry<TEntity> Update<TEntity>(TEntity entity) where TEntity : class;
        void UpdateRange(IEnumerable<object> entities);
        void UpdateRange(params object[] entities);

        IQueryable<TResult> FromExpression<TResult> (Expression<Func<IQueryable<TResult>>> expression);

        // Stored Procedures
        List<DashboardTrungThongTinHrmReturnModel> DashboardTrungThongTinHrm();
        List<DashboardTrungThongTinHrmReturnModel> DashboardTrungThongTinHrm(out int procResult);
        Task<List<DashboardTrungThongTinHrmReturnModel>> DashboardTrungThongTinHrmAsync();

        int DeleteAllUserAdInfo();
        // DeleteAllUserAdInfoAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int DeleteNguoiDungById(int? nguoiDungId);
        // DeleteNguoiDungByIdAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int FlatenDeletePhongBan(string maPhongBanChild);
        // FlatenDeletePhongBanAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int FlattenAllHplPhongBan();
        // FlattenAllHplPhongBanAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        List<GetAllLogNhanVienCreateReturnModel> GetAllLogNhanVienCreate(DateTime? dtFrom, DateTime? dtTo);
        List<GetAllLogNhanVienCreateReturnModel> GetAllLogNhanVienCreate(DateTime? dtFrom, DateTime? dtTo, out int procResult);
        Task<List<GetAllLogNhanVienCreateReturnModel>> GetAllLogNhanVienCreateAsync(DateTime? dtFrom, DateTime? dtTo);

        List<GetAllLogNhanVienDisableReturnModel> GetAllLogNhanVienDisable(DateTime? dtFrom, DateTime? dtTo);
        List<GetAllLogNhanVienDisableReturnModel> GetAllLogNhanVienDisable(DateTime? dtFrom, DateTime? dtTo, out int procResult);
        Task<List<GetAllLogNhanVienDisableReturnModel>> GetAllLogNhanVienDisableAsync(DateTime? dtFrom, DateTime? dtTo);

        List<GetAllNhanVienDangLamChuaCoUserReturnModel> GetAllNhanVienDangLamChuaCoUser();
        List<GetAllNhanVienDangLamChuaCoUserReturnModel> GetAllNhanVienDangLamChuaCoUser(out int procResult);
        Task<List<GetAllNhanVienDangLamChuaCoUserReturnModel>> GetAllNhanVienDangLamChuaCoUserAsync();

        List<GetAllNhanVienNghiViecDaCoUserReturnModel> GetAllNhanVienNghiViecDaCoUser();
        List<GetAllNhanVienNghiViecDaCoUserReturnModel> GetAllNhanVienNghiViecDaCoUser(out int procResult);
        Task<List<GetAllNhanVienNghiViecDaCoUserReturnModel>> GetAllNhanVienNghiViecDaCoUserAsync();

        List<GetAllNhanVienNghiViecTheoNgayReturnModel> GetAllNhanVienNghiViecTheoNgay(DateTime? dtFrom, DateTime? dtTo);
        List<GetAllNhanVienNghiViecTheoNgayReturnModel> GetAllNhanVienNghiViecTheoNgay(DateTime? dtFrom, DateTime? dtTo, out int procResult);
        Task<List<GetAllNhanVienNghiViecTheoNgayReturnModel>> GetAllNhanVienNghiViecTheoNgayAsync(DateTime? dtFrom, DateTime? dtTo);

        List<GetAllNhanVienTheoListMaNvReturnModel> GetAllNhanVienTheoListMaNv(DataTable listMaNhanVien);
        List<GetAllNhanVienTheoListMaNvReturnModel> GetAllNhanVienTheoListMaNv(DataTable listMaNhanVien, out int procResult);
        Task<List<GetAllNhanVienTheoListMaNvReturnModel>> GetAllNhanVienTheoListMaNvAsync(DataTable listMaNhanVien);

        List<GetAllPhongBanConVaChinhNoByIdReturnModel> GetAllPhongBanConVaChinhNoById(int? phongBanId);
        List<GetAllPhongBanConVaChinhNoByIdReturnModel> GetAllPhongBanConVaChinhNoById(int? phongBanId, out int procResult);
        Task<List<GetAllPhongBanConVaChinhNoByIdReturnModel>> GetAllPhongBanConVaChinhNoByIdAsync(int? phongBanId);

        List<GetAllUserSystemsReturnModel> GetAllUserSystems();
        List<GetAllUserSystemsReturnModel> GetAllUserSystems(out int procResult);
        Task<List<GetAllUserSystemsReturnModel>> GetAllUserSystemsAsync();

        List<ListLuanChuyenCanBoReturnModel> ListLuanChuyenCanBo(DateTime? dtFrom, DateTime? dtTo);
        List<ListLuanChuyenCanBoReturnModel> ListLuanChuyenCanBo(DateTime? dtFrom, DateTime? dtTo, out int procResult);
        Task<List<ListLuanChuyenCanBoReturnModel>> ListLuanChuyenCanBoAsync(DateTime? dtFrom, DateTime? dtTo);

        List<NhanVienCoNhieuUserReturnModel> NhanVienCoNhieuUser();
        List<NhanVienCoNhieuUserReturnModel> NhanVienCoNhieuUser(out int procResult);
        Task<List<NhanVienCoNhieuUserReturnModel>> NhanVienCoNhieuUserAsync();

        List<NhanVienEmailKoDungReturnModel> NhanVienEmailKoDung();
        List<NhanVienEmailKoDungReturnModel> NhanVienEmailKoDung(out int procResult);
        Task<List<NhanVienEmailKoDungReturnModel>> NhanVienEmailKoDungAsync();

        List<NhanVienErrorUsernameReturnModel> NhanVienErrorUsername();
        List<NhanVienErrorUsernameReturnModel> NhanVienErrorUsername(out int procResult);
        Task<List<NhanVienErrorUsernameReturnModel>> NhanVienErrorUsernameAsync();

        List<NhanVienTrungCmndReturnModel> NhanVienTrungCmnd();
        List<NhanVienTrungCmndReturnModel> NhanVienTrungCmnd(out int procResult);
        Task<List<NhanVienTrungCmndReturnModel>> NhanVienTrungCmndAsync();

        List<NhanVienTrungDienThoaiReturnModel> NhanVienTrungDienThoai();
        List<NhanVienTrungDienThoaiReturnModel> NhanVienTrungDienThoai(out int procResult);
        Task<List<NhanVienTrungDienThoaiReturnModel>> NhanVienTrungDienThoaiAsync();

        List<NhanVienTrungEmailReturnModel> NhanVienTrungEmail();
        List<NhanVienTrungEmailReturnModel> NhanVienTrungEmail(out int procResult);
        Task<List<NhanVienTrungEmailReturnModel>> NhanVienTrungEmailAsync();

        List<NhanVienTrungMaNhanVienReturnModel> NhanVienTrungMaNhanVien();
        List<NhanVienTrungMaNhanVienReturnModel> NhanVienTrungMaNhanVien(out int procResult);
        Task<List<NhanVienTrungMaNhanVienReturnModel>> NhanVienTrungMaNhanVienAsync();

        List<NhanVienTrungUserReturnModel> NhanVienTrungUser();
        List<NhanVienTrungUserReturnModel> NhanVienTrungUser(out int procResult);
        Task<List<NhanVienTrungUserReturnModel>> NhanVienTrungUserAsync();

        List<ThongKeTheoThangUserReturnModel> ThongKeTheoThangUser();
        List<ThongKeTheoThangUserReturnModel> ThongKeTheoThangUser(out int procResult);
        Task<List<ThongKeTheoThangUserReturnModel>> ThongKeTheoThangUserAsync();

        int UpdateBranchSaleOnline();
        // UpdateBranchSaleOnlineAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

    }

    #endregion

    #region Database context

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class AbpHplDbContext : DbContext, IAbpHplDbContext
    {
        public AbpHplDbContext()
        {
        }

        public AbpHplDbContext(DbContextOptions<AbpHplDbContext> options)
            : base(options)
        {
        }

        public DbSet<AbpAuditLog> AbpAuditLogs { get; set; } // AbpAuditLogs
        public DbSet<AbpBackgroundJob> AbpBackgroundJobs { get; set; } // AbpBackgroundJobs
        public DbSet<AbpDynamicEntityProperty> AbpDynamicEntityProperties { get; set; } // AbpDynamicEntityProperties
        public DbSet<AbpDynamicEntityPropertyValue> AbpDynamicEntityPropertyValues { get; set; } // AbpDynamicEntityPropertyValues
        public DbSet<AbpDynamicProperty> AbpDynamicProperties { get; set; } // AbpDynamicProperties
        public DbSet<AbpDynamicPropertyValue> AbpDynamicPropertyValues { get; set; } // AbpDynamicPropertyValues
        public DbSet<AbpEdition> AbpEditions { get; set; } // AbpEditions
        public DbSet<AbpEntityChangeSet> AbpEntityChangeSets { get; set; } // AbpEntityChangeSets
        public DbSet<AbpEntityChanx> AbpEntityChanges { get; set; } // AbpEntityChanges
        public DbSet<AbpEntityPropertyChanx> AbpEntityPropertyChanges { get; set; } // AbpEntityPropertyChanges
        public DbSet<AbpFeature> AbpFeatures { get; set; } // AbpFeatures
        public DbSet<AbpLanguage> AbpLanguages { get; set; } // AbpLanguages
        public DbSet<AbpLanguageText> AbpLanguageTexts { get; set; } // AbpLanguageTexts
        public DbSet<AbpNotification> AbpNotifications { get; set; } // AbpNotifications
        public DbSet<AbpNotificationSubscription> AbpNotificationSubscriptions { get; set; } // AbpNotificationSubscriptions
        public DbSet<AbpOrganizationUnit> AbpOrganizationUnits { get; set; } // AbpOrganizationUnits
        public DbSet<AbpOrganizationUnitRole> AbpOrganizationUnitRoles { get; set; } // AbpOrganizationUnitRoles
        public DbSet<AbpPermission> AbpPermissions { get; set; } // AbpPermissions
        public DbSet<AbpRole> AbpRoles { get; set; } // AbpRoles
        public DbSet<AbpRoleClaim> AbpRoleClaims { get; set; } // AbpRoleClaims
        public DbSet<AbpSetting> AbpSettings { get; set; } // AbpSettings
        public DbSet<AbpTenant> AbpTenants { get; set; } // AbpTenants
        public DbSet<AbpTenantNotification> AbpTenantNotifications { get; set; } // AbpTenantNotifications
        public DbSet<AbpUser> AbpUsers { get; set; } // AbpUsers
        public DbSet<AbpUserAccount> AbpUserAccounts { get; set; } // AbpUserAccounts
        public DbSet<AbpUserClaim> AbpUserClaims { get; set; } // AbpUserClaims
        public DbSet<AbpUserLogin> AbpUserLogins { get; set; } // AbpUserLogins
        public DbSet<AbpUserLoginAttempt> AbpUserLoginAttempts { get; set; } // AbpUserLoginAttempts
        public DbSet<AbpUserNotification> AbpUserNotifications { get; set; } // AbpUserNotifications
        public DbSet<AbpUserOrganizationUnit> AbpUserOrganizationUnits { get; set; } // AbpUserOrganizationUnits
        public DbSet<AbpUserRole> AbpUserRoles { get; set; } // AbpUserRoles
        public DbSet<AbpUserToken> AbpUserTokens { get; set; } // AbpUserTokens
        public DbSet<AbpWebhookEvent> AbpWebhookEvents { get; set; } // AbpWebhookEvents
        public DbSet<AbpWebhookSendAttempt> AbpWebhookSendAttempts { get; set; } // AbpWebhookSendAttempts
        public DbSet<AbpWebhookSubscription> AbpWebhookSubscriptions { get; set; } // AbpWebhookSubscriptions
        public DbSet<BlackListUser> BlackListUsers { get; set; } // BlackListUser
        public DbSet<CreateDisableUserManual> CreateDisableUserManuals { get; set; } // CreateDisableUserManuals
        public DbSet<Customer> Customers { get; set; } // Customers
        public DbSet<HplCreateUserLog> HplCreateUserLogs { get; set; } // HplCreateUserLogs
        public DbSet<HplDeleteEmailDoTaoLoi> HplDeleteEmailDoTaoLois { get; set; } // HplDeleteEmailDoTaoLoi
        public DbSet<HplDisableUserLog> HplDisableUserLogs { get; set; } // HplDisableUserLogs
        public DbSet<HplEmailCanXoa31082021> HplEmailCanXoa31082021 { get; set; } // HplEmailCanXoa31082021
        public DbSet<HplPhongBan> HplPhongBans { get; set; } // HplPhongBans
        public DbSet<HplPhongBanFlatten> HplPhongBanFlattens { get; set; } // HplPhongBanFlattens
        public DbSet<HplSyncLog> HplSyncLogs { get; set; } // HplSyncLogs
        public DbSet<HplTestTable> HplTestTables { get; set; } // HplTestTable
        public DbSet<UserAdInfo> UserAdInfoes { get; set; } // UserAdInfo

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer(@"Server=54.251.3.45; Database=HPL_ACM; User ID=sa; Password=Zm*3_E}7gaR83+_G; MultipleActiveResultSets=True");
            }
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.ApplyConfiguration(new AbpAuditLogConfiguration());
            modelBuilder.ApplyConfiguration(new AbpBackgroundJobConfiguration());
            modelBuilder.ApplyConfiguration(new AbpDynamicEntityPropertyConfiguration());
            modelBuilder.ApplyConfiguration(new AbpDynamicEntityPropertyValueConfiguration());
            modelBuilder.ApplyConfiguration(new AbpDynamicPropertyConfiguration());
            modelBuilder.ApplyConfiguration(new AbpDynamicPropertyValueConfiguration());
            modelBuilder.ApplyConfiguration(new AbpEditionConfiguration());
            modelBuilder.ApplyConfiguration(new AbpEntityChangeSetConfiguration());
            modelBuilder.ApplyConfiguration(new AbpEntityChanxConfiguration());
            modelBuilder.ApplyConfiguration(new AbpEntityPropertyChanxConfiguration());
            modelBuilder.ApplyConfiguration(new AbpFeatureConfiguration());
            modelBuilder.ApplyConfiguration(new AbpLanguageConfiguration());
            modelBuilder.ApplyConfiguration(new AbpLanguageTextConfiguration());
            modelBuilder.ApplyConfiguration(new AbpNotificationConfiguration());
            modelBuilder.ApplyConfiguration(new AbpNotificationSubscriptionConfiguration());
            modelBuilder.ApplyConfiguration(new AbpOrganizationUnitConfiguration());
            modelBuilder.ApplyConfiguration(new AbpOrganizationUnitRoleConfiguration());
            modelBuilder.ApplyConfiguration(new AbpPermissionConfiguration());
            modelBuilder.ApplyConfiguration(new AbpRoleConfiguration());
            modelBuilder.ApplyConfiguration(new AbpRoleClaimConfiguration());
            modelBuilder.ApplyConfiguration(new AbpSettingConfiguration());
            modelBuilder.ApplyConfiguration(new AbpTenantConfiguration());
            modelBuilder.ApplyConfiguration(new AbpTenantNotificationConfiguration());
            modelBuilder.ApplyConfiguration(new AbpUserConfiguration());
            modelBuilder.ApplyConfiguration(new AbpUserAccountConfiguration());
            modelBuilder.ApplyConfiguration(new AbpUserClaimConfiguration());
            modelBuilder.ApplyConfiguration(new AbpUserLoginConfiguration());
            modelBuilder.ApplyConfiguration(new AbpUserLoginAttemptConfiguration());
            modelBuilder.ApplyConfiguration(new AbpUserNotificationConfiguration());
            modelBuilder.ApplyConfiguration(new AbpUserOrganizationUnitConfiguration());
            modelBuilder.ApplyConfiguration(new AbpUserRoleConfiguration());
            modelBuilder.ApplyConfiguration(new AbpUserTokenConfiguration());
            modelBuilder.ApplyConfiguration(new AbpWebhookEventConfiguration());
            modelBuilder.ApplyConfiguration(new AbpWebhookSendAttemptConfiguration());
            modelBuilder.ApplyConfiguration(new AbpWebhookSubscriptionConfiguration());
            modelBuilder.ApplyConfiguration(new BlackListUserConfiguration());
            modelBuilder.ApplyConfiguration(new CreateDisableUserManualConfiguration());
            modelBuilder.ApplyConfiguration(new CustomerConfiguration());
            modelBuilder.ApplyConfiguration(new HplCreateUserLogConfiguration());
            modelBuilder.ApplyConfiguration(new HplDeleteEmailDoTaoLoiConfiguration());
            modelBuilder.ApplyConfiguration(new HplDisableUserLogConfiguration());
            modelBuilder.ApplyConfiguration(new HplEmailCanXoa31082021Configuration());
            modelBuilder.ApplyConfiguration(new HplPhongBanConfiguration());
            modelBuilder.ApplyConfiguration(new HplPhongBanFlattenConfiguration());
            modelBuilder.ApplyConfiguration(new HplSyncLogConfiguration());
            modelBuilder.ApplyConfiguration(new HplTestTableConfiguration());
            modelBuilder.ApplyConfiguration(new UserAdInfoConfiguration());

            modelBuilder.Entity<DashboardTrungThongTinHrmReturnModel>().HasNoKey();
            modelBuilder.Entity<GetAllLogNhanVienCreateReturnModel>().HasNoKey();
            modelBuilder.Entity<GetAllLogNhanVienDisableReturnModel>().HasNoKey();
            modelBuilder.Entity<GetAllNhanVienDangLamChuaCoUserReturnModel>().HasNoKey();
            modelBuilder.Entity<GetAllNhanVienNghiViecDaCoUserReturnModel>().HasNoKey();
            modelBuilder.Entity<GetAllNhanVienNghiViecTheoNgayReturnModel>().HasNoKey();
            modelBuilder.Entity<GetAllNhanVienTheoListMaNvReturnModel>().HasNoKey();
            modelBuilder.Entity<GetAllPhongBanConVaChinhNoByIdReturnModel>().HasNoKey();
            modelBuilder.Entity<GetAllUserSystemsReturnModel>().HasNoKey();
            modelBuilder.Entity<ListLuanChuyenCanBoReturnModel>().HasNoKey();
            modelBuilder.Entity<NhanVienCoNhieuUserReturnModel>().HasNoKey();
            modelBuilder.Entity<NhanVienEmailKoDungReturnModel>().HasNoKey();
            modelBuilder.Entity<NhanVienErrorUsernameReturnModel>().HasNoKey();
            modelBuilder.Entity<NhanVienTrungCmndReturnModel>().HasNoKey();
            modelBuilder.Entity<NhanVienTrungDienThoaiReturnModel>().HasNoKey();
            modelBuilder.Entity<NhanVienTrungEmailReturnModel>().HasNoKey();
            modelBuilder.Entity<NhanVienTrungMaNhanVienReturnModel>().HasNoKey();
            modelBuilder.Entity<NhanVienTrungUserReturnModel>().HasNoKey();
            modelBuilder.Entity<ThongKeTheoThangUserReturnModel>().HasNoKey();
        }


        // Stored Procedures
        public List<DashboardTrungThongTinHrmReturnModel> DashboardTrungThongTinHrm()
        {
            int procResult;
            return DashboardTrungThongTinHrm(out procResult);
        }

        public List<DashboardTrungThongTinHrmReturnModel> DashboardTrungThongTinHrm(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[DashboardTrungThongTinHrm]";
            var procResultData = Set<DashboardTrungThongTinHrmReturnModel>()
                .FromSqlRaw(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<DashboardTrungThongTinHrmReturnModel>> DashboardTrungThongTinHrmAsync()
        {
            const string sqlCommand = "EXEC [dbo].[DashboardTrungThongTinHrm]";
            var procResultData = await Set<DashboardTrungThongTinHrmReturnModel>()
                .FromSqlRaw(sqlCommand)
                .ToListAsync();

            return procResultData;
        }

        public int DeleteAllUserAdInfo()
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[DeleteAllUserAdInfo] ", procResultParam);

            return (int)procResultParam.Value;
        }

        // DeleteAllUserAdInfoAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int DeleteNguoiDungById(int? nguoiDungId)
        {
            var nguoiDungIdParam = new SqlParameter { ParameterName = "@nguoiDungId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = nguoiDungId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!nguoiDungId.HasValue)
                nguoiDungIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[DeleteNguoiDungById] @nguoiDungId", nguoiDungIdParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // DeleteNguoiDungByIdAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int FlatenDeletePhongBan(string maPhongBanChild)
        {
            var maPhongBanChildParam = new SqlParameter { ParameterName = "@maPhongBanChild", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = maPhongBanChild, Size = 128 };
            if (maPhongBanChildParam.Value == null)
                maPhongBanChildParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[FlatenDeletePhongBan] @maPhongBanChild", maPhongBanChildParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // FlatenDeletePhongBanAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int FlattenAllHplPhongBan()
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[FlattenAllHplPhongBan] ", procResultParam);

            return (int)procResultParam.Value;
        }

        // FlattenAllHplPhongBanAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<GetAllLogNhanVienCreateReturnModel> GetAllLogNhanVienCreate(DateTime? dtFrom, DateTime? dtTo)
        {
            int procResult;
            return GetAllLogNhanVienCreate(dtFrom, dtTo, out procResult);
        }

        public List<GetAllLogNhanVienCreateReturnModel> GetAllLogNhanVienCreate(DateTime? dtFrom, DateTime? dtTo, out int procResult)
        {
            var dtFromParam = new SqlParameter { ParameterName = "@dtFrom", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = dtFrom.GetValueOrDefault() };
            if (!dtFrom.HasValue)
                dtFromParam.Value = DBNull.Value;

            var dtToParam = new SqlParameter { ParameterName = "@dtTo", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = dtTo.GetValueOrDefault() };
            if (!dtTo.HasValue)
                dtToParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[GetAllLogNhanVienCreate] @dtFrom, @dtTo";
            var procResultData = Set<GetAllLogNhanVienCreateReturnModel>()
                .FromSqlRaw(sqlCommand, dtFromParam, dtToParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<GetAllLogNhanVienCreateReturnModel>> GetAllLogNhanVienCreateAsync(DateTime? dtFrom, DateTime? dtTo)
        {
            var dtFromParam = new SqlParameter { ParameterName = "@dtFrom", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = dtFrom.GetValueOrDefault() };
            if (!dtFrom.HasValue)
                dtFromParam.Value = DBNull.Value;

            var dtToParam = new SqlParameter { ParameterName = "@dtTo", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = dtTo.GetValueOrDefault() };
            if (!dtTo.HasValue)
                dtToParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[GetAllLogNhanVienCreate] @dtFrom, @dtTo";
            var procResultData = await Set<GetAllLogNhanVienCreateReturnModel>()
                .FromSqlRaw(sqlCommand, dtFromParam, dtToParam)
                .ToListAsync();

            return procResultData;
        }

        public List<GetAllLogNhanVienDisableReturnModel> GetAllLogNhanVienDisable(DateTime? dtFrom, DateTime? dtTo)
        {
            int procResult;
            return GetAllLogNhanVienDisable(dtFrom, dtTo, out procResult);
        }

        public List<GetAllLogNhanVienDisableReturnModel> GetAllLogNhanVienDisable(DateTime? dtFrom, DateTime? dtTo, out int procResult)
        {
            var dtFromParam = new SqlParameter { ParameterName = "@dtFrom", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = dtFrom.GetValueOrDefault() };
            if (!dtFrom.HasValue)
                dtFromParam.Value = DBNull.Value;

            var dtToParam = new SqlParameter { ParameterName = "@dtTo", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = dtTo.GetValueOrDefault() };
            if (!dtTo.HasValue)
                dtToParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[GetAllLogNhanVienDisable] @dtFrom, @dtTo";
            var procResultData = Set<GetAllLogNhanVienDisableReturnModel>()
                .FromSqlRaw(sqlCommand, dtFromParam, dtToParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<GetAllLogNhanVienDisableReturnModel>> GetAllLogNhanVienDisableAsync(DateTime? dtFrom, DateTime? dtTo)
        {
            var dtFromParam = new SqlParameter { ParameterName = "@dtFrom", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = dtFrom.GetValueOrDefault() };
            if (!dtFrom.HasValue)
                dtFromParam.Value = DBNull.Value;

            var dtToParam = new SqlParameter { ParameterName = "@dtTo", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = dtTo.GetValueOrDefault() };
            if (!dtTo.HasValue)
                dtToParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[GetAllLogNhanVienDisable] @dtFrom, @dtTo";
            var procResultData = await Set<GetAllLogNhanVienDisableReturnModel>()
                .FromSqlRaw(sqlCommand, dtFromParam, dtToParam)
                .ToListAsync();

            return procResultData;
        }

        public List<GetAllNhanVienDangLamChuaCoUserReturnModel> GetAllNhanVienDangLamChuaCoUser()
        {
            int procResult;
            return GetAllNhanVienDangLamChuaCoUser(out procResult);
        }

        public List<GetAllNhanVienDangLamChuaCoUserReturnModel> GetAllNhanVienDangLamChuaCoUser(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[GetAllNhanVienDangLamChuaCoUser]";
            var procResultData = Set<GetAllNhanVienDangLamChuaCoUserReturnModel>()
                .FromSqlRaw(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<GetAllNhanVienDangLamChuaCoUserReturnModel>> GetAllNhanVienDangLamChuaCoUserAsync()
        {
            const string sqlCommand = "EXEC [dbo].[GetAllNhanVienDangLamChuaCoUser]";
            var procResultData = await Set<GetAllNhanVienDangLamChuaCoUserReturnModel>()
                .FromSqlRaw(sqlCommand)
                .ToListAsync();

            return procResultData;
        }

        public List<GetAllNhanVienNghiViecDaCoUserReturnModel> GetAllNhanVienNghiViecDaCoUser()
        {
            int procResult;
            return GetAllNhanVienNghiViecDaCoUser(out procResult);
        }

        public List<GetAllNhanVienNghiViecDaCoUserReturnModel> GetAllNhanVienNghiViecDaCoUser(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[GetAllNhanVienNghiViecDaCoUser]";
            var procResultData = Set<GetAllNhanVienNghiViecDaCoUserReturnModel>()
                .FromSqlRaw(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<GetAllNhanVienNghiViecDaCoUserReturnModel>> GetAllNhanVienNghiViecDaCoUserAsync()
        {
            const string sqlCommand = "EXEC [dbo].[GetAllNhanVienNghiViecDaCoUser]";
            var procResultData = await Set<GetAllNhanVienNghiViecDaCoUserReturnModel>()
                .FromSqlRaw(sqlCommand)
                .ToListAsync();

            return procResultData;
        }

        public List<GetAllNhanVienNghiViecTheoNgayReturnModel> GetAllNhanVienNghiViecTheoNgay(DateTime? dtFrom, DateTime? dtTo)
        {
            int procResult;
            return GetAllNhanVienNghiViecTheoNgay(dtFrom, dtTo, out procResult);
        }

        public List<GetAllNhanVienNghiViecTheoNgayReturnModel> GetAllNhanVienNghiViecTheoNgay(DateTime? dtFrom, DateTime? dtTo, out int procResult)
        {
            var dtFromParam = new SqlParameter { ParameterName = "@dtFrom", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = dtFrom.GetValueOrDefault() };
            if (!dtFrom.HasValue)
                dtFromParam.Value = DBNull.Value;

            var dtToParam = new SqlParameter { ParameterName = "@dtTo", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = dtTo.GetValueOrDefault() };
            if (!dtTo.HasValue)
                dtToParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[GetAllNhanVienNghiViecTheoNgay] @dtFrom, @dtTo";
            var procResultData = Set<GetAllNhanVienNghiViecTheoNgayReturnModel>()
                .FromSqlRaw(sqlCommand, dtFromParam, dtToParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<GetAllNhanVienNghiViecTheoNgayReturnModel>> GetAllNhanVienNghiViecTheoNgayAsync(DateTime? dtFrom, DateTime? dtTo)
        {
            var dtFromParam = new SqlParameter { ParameterName = "@dtFrom", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = dtFrom.GetValueOrDefault() };
            if (!dtFrom.HasValue)
                dtFromParam.Value = DBNull.Value;

            var dtToParam = new SqlParameter { ParameterName = "@dtTo", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = dtTo.GetValueOrDefault() };
            if (!dtTo.HasValue)
                dtToParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[GetAllNhanVienNghiViecTheoNgay] @dtFrom, @dtTo";
            var procResultData = await Set<GetAllNhanVienNghiViecTheoNgayReturnModel>()
                .FromSqlRaw(sqlCommand, dtFromParam, dtToParam)
                .ToListAsync();

            return procResultData;
        }

        public List<GetAllNhanVienTheoListMaNvReturnModel> GetAllNhanVienTheoListMaNv(DataTable listMaNhanVien)
        {
            int procResult;
            return GetAllNhanVienTheoListMaNv(listMaNhanVien, out procResult);
        }

        public List<GetAllNhanVienTheoListMaNvReturnModel> GetAllNhanVienTheoListMaNv(DataTable listMaNhanVien, out int procResult)
        {
            var listMaNhanVienParam = new SqlParameter { ParameterName = "@listMaNhanVien", SqlDbType = SqlDbType.Structured, Direction = ParameterDirection.Input, Value = listMaNhanVien, TypeName = "dbo.DanhSachMaNhanVien" };
            if (listMaNhanVienParam.Value == null)
                listMaNhanVienParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[GetAllNhanVienTheoListMaNv] @listMaNhanVien";
            var procResultData = Set<GetAllNhanVienTheoListMaNvReturnModel>()
                .FromSqlRaw(sqlCommand, listMaNhanVienParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<GetAllNhanVienTheoListMaNvReturnModel>> GetAllNhanVienTheoListMaNvAsync(DataTable listMaNhanVien)
        {
            var listMaNhanVienParam = new SqlParameter { ParameterName = "@listMaNhanVien", SqlDbType = SqlDbType.Structured, Direction = ParameterDirection.Input, Value = listMaNhanVien, TypeName = "dbo.DanhSachMaNhanVien" };
            if (listMaNhanVienParam.Value == null)
                listMaNhanVienParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[GetAllNhanVienTheoListMaNv] @listMaNhanVien";
            var procResultData = await Set<GetAllNhanVienTheoListMaNvReturnModel>()
                .FromSqlRaw(sqlCommand, listMaNhanVienParam)
                .ToListAsync();

            return procResultData;
        }

        public List<GetAllPhongBanConVaChinhNoByIdReturnModel> GetAllPhongBanConVaChinhNoById(int? phongBanId)
        {
            int procResult;
            return GetAllPhongBanConVaChinhNoById(phongBanId, out procResult);
        }

        public List<GetAllPhongBanConVaChinhNoByIdReturnModel> GetAllPhongBanConVaChinhNoById(int? phongBanId, out int procResult)
        {
            var phongBanIdParam = new SqlParameter { ParameterName = "@phongBanId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = phongBanId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!phongBanId.HasValue)
                phongBanIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[GetAllPhongBanConVaChinhNoById] @phongBanId";
            var procResultData = Set<GetAllPhongBanConVaChinhNoByIdReturnModel>()
                .FromSqlRaw(sqlCommand, phongBanIdParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<GetAllPhongBanConVaChinhNoByIdReturnModel>> GetAllPhongBanConVaChinhNoByIdAsync(int? phongBanId)
        {
            var phongBanIdParam = new SqlParameter { ParameterName = "@phongBanId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = phongBanId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!phongBanId.HasValue)
                phongBanIdParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[GetAllPhongBanConVaChinhNoById] @phongBanId";
            var procResultData = await Set<GetAllPhongBanConVaChinhNoByIdReturnModel>()
                .FromSqlRaw(sqlCommand, phongBanIdParam)
                .ToListAsync();

            return procResultData;
        }

        public List<GetAllUserSystemsReturnModel> GetAllUserSystems()
        {
            int procResult;
            return GetAllUserSystems(out procResult);
        }

        public List<GetAllUserSystemsReturnModel> GetAllUserSystems(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[GetAllUserSystems]";
            var procResultData = Set<GetAllUserSystemsReturnModel>()
                .FromSqlRaw(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<GetAllUserSystemsReturnModel>> GetAllUserSystemsAsync()
        {
            const string sqlCommand = "EXEC [dbo].[GetAllUserSystems]";
            var procResultData = await Set<GetAllUserSystemsReturnModel>()
                .FromSqlRaw(sqlCommand)
                .ToListAsync();

            return procResultData;
        }

        public List<ListLuanChuyenCanBoReturnModel> ListLuanChuyenCanBo(DateTime? dtFrom, DateTime? dtTo)
        {
            int procResult;
            return ListLuanChuyenCanBo(dtFrom, dtTo, out procResult);
        }

        public List<ListLuanChuyenCanBoReturnModel> ListLuanChuyenCanBo(DateTime? dtFrom, DateTime? dtTo, out int procResult)
        {
            var dtFromParam = new SqlParameter { ParameterName = "@dtFrom", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = dtFrom.GetValueOrDefault() };
            if (!dtFrom.HasValue)
                dtFromParam.Value = DBNull.Value;

            var dtToParam = new SqlParameter { ParameterName = "@dtTo", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = dtTo.GetValueOrDefault() };
            if (!dtTo.HasValue)
                dtToParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[ListLuanChuyenCanBo] @dtFrom, @dtTo";
            var procResultData = Set<ListLuanChuyenCanBoReturnModel>()
                .FromSqlRaw(sqlCommand, dtFromParam, dtToParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<ListLuanChuyenCanBoReturnModel>> ListLuanChuyenCanBoAsync(DateTime? dtFrom, DateTime? dtTo)
        {
            var dtFromParam = new SqlParameter { ParameterName = "@dtFrom", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = dtFrom.GetValueOrDefault() };
            if (!dtFrom.HasValue)
                dtFromParam.Value = DBNull.Value;

            var dtToParam = new SqlParameter { ParameterName = "@dtTo", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = dtTo.GetValueOrDefault() };
            if (!dtTo.HasValue)
                dtToParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[ListLuanChuyenCanBo] @dtFrom, @dtTo";
            var procResultData = await Set<ListLuanChuyenCanBoReturnModel>()
                .FromSqlRaw(sqlCommand, dtFromParam, dtToParam)
                .ToListAsync();

            return procResultData;
        }

        public List<NhanVienCoNhieuUserReturnModel> NhanVienCoNhieuUser()
        {
            int procResult;
            return NhanVienCoNhieuUser(out procResult);
        }

        public List<NhanVienCoNhieuUserReturnModel> NhanVienCoNhieuUser(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[NhanVienCoNhieuUser]";
            var procResultData = Set<NhanVienCoNhieuUserReturnModel>()
                .FromSqlRaw(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<NhanVienCoNhieuUserReturnModel>> NhanVienCoNhieuUserAsync()
        {
            const string sqlCommand = "EXEC [dbo].[NhanVienCoNhieuUser]";
            var procResultData = await Set<NhanVienCoNhieuUserReturnModel>()
                .FromSqlRaw(sqlCommand)
                .ToListAsync();

            return procResultData;
        }

        public List<NhanVienEmailKoDungReturnModel> NhanVienEmailKoDung()
        {
            int procResult;
            return NhanVienEmailKoDung(out procResult);
        }

        public List<NhanVienEmailKoDungReturnModel> NhanVienEmailKoDung(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[NhanVienEmailKoDung]";
            var procResultData = Set<NhanVienEmailKoDungReturnModel>()
                .FromSqlRaw(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<NhanVienEmailKoDungReturnModel>> NhanVienEmailKoDungAsync()
        {
            const string sqlCommand = "EXEC [dbo].[NhanVienEmailKoDung]";
            var procResultData = await Set<NhanVienEmailKoDungReturnModel>()
                .FromSqlRaw(sqlCommand)
                .ToListAsync();

            return procResultData;
        }

        public List<NhanVienErrorUsernameReturnModel> NhanVienErrorUsername()
        {
            int procResult;
            return NhanVienErrorUsername(out procResult);
        }

        public List<NhanVienErrorUsernameReturnModel> NhanVienErrorUsername(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[NhanVienErrorUsername]";
            var procResultData = Set<NhanVienErrorUsernameReturnModel>()
                .FromSqlRaw(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<NhanVienErrorUsernameReturnModel>> NhanVienErrorUsernameAsync()
        {
            const string sqlCommand = "EXEC [dbo].[NhanVienErrorUsername]";
            var procResultData = await Set<NhanVienErrorUsernameReturnModel>()
                .FromSqlRaw(sqlCommand)
                .ToListAsync();

            return procResultData;
        }

        public List<NhanVienTrungCmndReturnModel> NhanVienTrungCmnd()
        {
            int procResult;
            return NhanVienTrungCmnd(out procResult);
        }

        public List<NhanVienTrungCmndReturnModel> NhanVienTrungCmnd(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[NhanVienTrungCmnd]";
            var procResultData = Set<NhanVienTrungCmndReturnModel>()
                .FromSqlRaw(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<NhanVienTrungCmndReturnModel>> NhanVienTrungCmndAsync()
        {
            const string sqlCommand = "EXEC [dbo].[NhanVienTrungCmnd]";
            var procResultData = await Set<NhanVienTrungCmndReturnModel>()
                .FromSqlRaw(sqlCommand)
                .ToListAsync();

            return procResultData;
        }

        public List<NhanVienTrungDienThoaiReturnModel> NhanVienTrungDienThoai()
        {
            int procResult;
            return NhanVienTrungDienThoai(out procResult);
        }

        public List<NhanVienTrungDienThoaiReturnModel> NhanVienTrungDienThoai(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[NhanVienTrungDienThoai]";
            var procResultData = Set<NhanVienTrungDienThoaiReturnModel>()
                .FromSqlRaw(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<NhanVienTrungDienThoaiReturnModel>> NhanVienTrungDienThoaiAsync()
        {
            const string sqlCommand = "EXEC [dbo].[NhanVienTrungDienThoai]";
            var procResultData = await Set<NhanVienTrungDienThoaiReturnModel>()
                .FromSqlRaw(sqlCommand)
                .ToListAsync();

            return procResultData;
        }

        public List<NhanVienTrungEmailReturnModel> NhanVienTrungEmail()
        {
            int procResult;
            return NhanVienTrungEmail(out procResult);
        }

        public List<NhanVienTrungEmailReturnModel> NhanVienTrungEmail(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[NhanVienTrungEmail]";
            var procResultData = Set<NhanVienTrungEmailReturnModel>()
                .FromSqlRaw(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<NhanVienTrungEmailReturnModel>> NhanVienTrungEmailAsync()
        {
            const string sqlCommand = "EXEC [dbo].[NhanVienTrungEmail]";
            var procResultData = await Set<NhanVienTrungEmailReturnModel>()
                .FromSqlRaw(sqlCommand)
                .ToListAsync();

            return procResultData;
        }

        public List<NhanVienTrungMaNhanVienReturnModel> NhanVienTrungMaNhanVien()
        {
            int procResult;
            return NhanVienTrungMaNhanVien(out procResult);
        }

        public List<NhanVienTrungMaNhanVienReturnModel> NhanVienTrungMaNhanVien(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[NhanVienTrungMaNhanVien]";
            var procResultData = Set<NhanVienTrungMaNhanVienReturnModel>()
                .FromSqlRaw(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<NhanVienTrungMaNhanVienReturnModel>> NhanVienTrungMaNhanVienAsync()
        {
            const string sqlCommand = "EXEC [dbo].[NhanVienTrungMaNhanVien]";
            var procResultData = await Set<NhanVienTrungMaNhanVienReturnModel>()
                .FromSqlRaw(sqlCommand)
                .ToListAsync();

            return procResultData;
        }

        public List<NhanVienTrungUserReturnModel> NhanVienTrungUser()
        {
            int procResult;
            return NhanVienTrungUser(out procResult);
        }

        public List<NhanVienTrungUserReturnModel> NhanVienTrungUser(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[NhanVienTrungUser]";
            var procResultData = Set<NhanVienTrungUserReturnModel>()
                .FromSqlRaw(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<NhanVienTrungUserReturnModel>> NhanVienTrungUserAsync()
        {
            const string sqlCommand = "EXEC [dbo].[NhanVienTrungUser]";
            var procResultData = await Set<NhanVienTrungUserReturnModel>()
                .FromSqlRaw(sqlCommand)
                .ToListAsync();

            return procResultData;
        }

        public List<ThongKeTheoThangUserReturnModel> ThongKeTheoThangUser()
        {
            int procResult;
            return ThongKeTheoThangUser(out procResult);
        }

        public List<ThongKeTheoThangUserReturnModel> ThongKeTheoThangUser(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[ThongKeTheoThangUser]";
            var procResultData = Set<ThongKeTheoThangUserReturnModel>()
                .FromSqlRaw(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<ThongKeTheoThangUserReturnModel>> ThongKeTheoThangUserAsync()
        {
            const string sqlCommand = "EXEC [dbo].[ThongKeTheoThangUser]";
            var procResultData = await Set<ThongKeTheoThangUserReturnModel>()
                .FromSqlRaw(sqlCommand)
                .ToListAsync();

            return procResultData;
        }

        public int UpdateBranchSaleOnline()
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[UpdateBranchSaleOnline] ", procResultParam);

            return (int)procResultParam.Value;
        }

        // UpdateBranchSaleOnlineAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

    }

    #endregion

    #region Database context factory

    public class AbpHplDbContextFactory : IDesignTimeDbContextFactory<AbpHplDbContext>
    {
        public AbpHplDbContext CreateDbContext(string[] args)
        {
            return new AbpHplDbContext();
        }
    }

    #endregion

    #region POCO classes

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    // AbpAuditLogs
    public class AbpAuditLog
    {
        public long Id { get; set; } // Id (Primary key)
        public string BrowserInfo { get; set; } // BrowserInfo (length: 512)
        public string ClientIpAddress { get; set; } // ClientIpAddress (length: 64)
        public string ClientName { get; set; } // ClientName (length: 128)
        public string CustomData { get; set; } // CustomData (length: 2000)
        public string Exception { get; set; } // Exception (length: 2000)
        public int ExecutionDuration { get; set; } // ExecutionDuration
        public DateTime ExecutionTime { get; set; } // ExecutionTime
        public int? ImpersonatorTenantId { get; set; } // ImpersonatorTenantId
        public long? ImpersonatorUserId { get; set; } // ImpersonatorUserId
        public string MethodName { get; set; } // MethodName (length: 256)
        public string Parameters { get; set; } // Parameters (length: 1024)
        public string ServiceName { get; set; } // ServiceName (length: 256)
        public int? TenantId { get; set; } // TenantId
        public long? UserId { get; set; } // UserId
        public string ReturnValue { get; set; } // ReturnValue
        public string ExceptionMessage { get; set; } // ExceptionMessage (length: 1024)
    }

    // AbpBackgroundJobs
    public class AbpBackgroundJob
    {
        public long Id { get; set; } // Id (Primary key)
        public DateTime CreationTime { get; set; } // CreationTime
        public long? CreatorUserId { get; set; } // CreatorUserId
        public bool IsAbandoned { get; set; } // IsAbandoned
        public string JobArgs { get; set; } // JobArgs
        public string JobType { get; set; } // JobType (length: 512)
        public DateTime? LastTryTime { get; set; } // LastTryTime
        public DateTime NextTryTime { get; set; } // NextTryTime
        public byte Priority { get; set; } // Priority
        public short TryCount { get; set; } // TryCount
    }

    // AbpDynamicEntityProperties
    public class AbpDynamicEntityProperty
    {
        public int Id { get; set; } // Id (Primary key)
        public string EntityFullName { get; set; } // EntityFullName (length: 256)
        public int DynamicPropertyId { get; set; } // DynamicPropertyId
        public int? TenantId { get; set; } // TenantId

        // Reverse navigation

        /// <summary>
        /// Child AbpDynamicEntityPropertyValues where [AbpDynamicEntityPropertyValues].[DynamicEntityPropertyId] point to this entity (FK_AbpDynamicEntityPropertyValues_AbpDynamicEntityProperties_DynamicEntityPropertyId)
        /// </summary>
        public virtual ICollection<AbpDynamicEntityPropertyValue> AbpDynamicEntityPropertyValues { get; set; } // AbpDynamicEntityPropertyValues.FK_AbpDynamicEntityPropertyValues_AbpDynamicEntityProperties_DynamicEntityPropertyId

        // Foreign keys

        /// <summary>
        /// Parent AbpDynamicProperty pointed by [AbpDynamicEntityProperties].([DynamicPropertyId]) (FK_AbpDynamicEntityProperties_AbpDynamicProperties_DynamicPropertyId)
        /// </summary>
        public virtual AbpDynamicProperty AbpDynamicProperty { get; set; } // FK_AbpDynamicEntityProperties_AbpDynamicProperties_DynamicPropertyId

        public AbpDynamicEntityProperty()
        {
            AbpDynamicEntityPropertyValues = new List<AbpDynamicEntityPropertyValue>();
        }
    }

    // AbpDynamicEntityPropertyValues
    public class AbpDynamicEntityPropertyValue
    {
        public string Value { get; set; } // Value
        public string EntityId { get; set; } // EntityId
        public int DynamicEntityPropertyId { get; set; } // DynamicEntityPropertyId
        public int? TenantId { get; set; } // TenantId
        public long Id { get; set; } // Id (Primary key)

        // Foreign keys

        /// <summary>
        /// Parent AbpDynamicEntityProperty pointed by [AbpDynamicEntityPropertyValues].([DynamicEntityPropertyId]) (FK_AbpDynamicEntityPropertyValues_AbpDynamicEntityProperties_DynamicEntityPropertyId)
        /// </summary>
        public virtual AbpDynamicEntityProperty AbpDynamicEntityProperty { get; set; } // FK_AbpDynamicEntityPropertyValues_AbpDynamicEntityProperties_DynamicEntityPropertyId
    }

    // AbpDynamicProperties
    public class AbpDynamicProperty
    {
        public int Id { get; set; } // Id (Primary key)
        public string PropertyName { get; set; } // PropertyName (length: 256)
        public string InputType { get; set; } // InputType
        public string Permission { get; set; } // Permission
        public int? TenantId { get; set; } // TenantId
        public string DisplayName { get; set; } // DisplayName

        // Reverse navigation

        /// <summary>
        /// Child AbpDynamicEntityProperties where [AbpDynamicEntityProperties].[DynamicPropertyId] point to this entity (FK_AbpDynamicEntityProperties_AbpDynamicProperties_DynamicPropertyId)
        /// </summary>
        public virtual ICollection<AbpDynamicEntityProperty> AbpDynamicEntityProperties { get; set; } // AbpDynamicEntityProperties.FK_AbpDynamicEntityProperties_AbpDynamicProperties_DynamicPropertyId

        /// <summary>
        /// Child AbpDynamicPropertyValues where [AbpDynamicPropertyValues].[DynamicPropertyId] point to this entity (FK_AbpDynamicPropertyValues_AbpDynamicProperties_DynamicPropertyId)
        /// </summary>
        public virtual ICollection<AbpDynamicPropertyValue> AbpDynamicPropertyValues { get; set; } // AbpDynamicPropertyValues.FK_AbpDynamicPropertyValues_AbpDynamicProperties_DynamicPropertyId

        public AbpDynamicProperty()
        {
            AbpDynamicEntityProperties = new List<AbpDynamicEntityProperty>();
            AbpDynamicPropertyValues = new List<AbpDynamicPropertyValue>();
        }
    }

    // AbpDynamicPropertyValues
    public class AbpDynamicPropertyValue
    {
        public string Value { get; set; } // Value
        public int? TenantId { get; set; } // TenantId
        public int DynamicPropertyId { get; set; } // DynamicPropertyId
        public long Id { get; set; } // Id (Primary key)

        // Foreign keys

        /// <summary>
        /// Parent AbpDynamicProperty pointed by [AbpDynamicPropertyValues].([DynamicPropertyId]) (FK_AbpDynamicPropertyValues_AbpDynamicProperties_DynamicPropertyId)
        /// </summary>
        public virtual AbpDynamicProperty AbpDynamicProperty { get; set; } // FK_AbpDynamicPropertyValues_AbpDynamicProperties_DynamicPropertyId
    }

    // AbpEditions
    public class AbpEdition
    {
        public int Id { get; set; } // Id (Primary key)
        public DateTime CreationTime { get; set; } // CreationTime
        public long? CreatorUserId { get; set; } // CreatorUserId
        public long? DeleterUserId { get; set; } // DeleterUserId
        public DateTime? DeletionTime { get; set; } // DeletionTime
        public string DisplayName { get; set; } // DisplayName (length: 64)
        public bool IsDeleted { get; set; } // IsDeleted
        public DateTime? LastModificationTime { get; set; } // LastModificationTime
        public long? LastModifierUserId { get; set; } // LastModifierUserId
        public string Name { get; set; } // Name (length: 32)

        // Reverse navigation

        /// <summary>
        /// Child AbpFeatures where [AbpFeatures].[EditionId] point to this entity (FK_AbpFeatures_AbpEditions_EditionId)
        /// </summary>
        public virtual ICollection<AbpFeature> AbpFeatures { get; set; } // AbpFeatures.FK_AbpFeatures_AbpEditions_EditionId

        /// <summary>
        /// Child AbpTenants where [AbpTenants].[EditionId] point to this entity (FK_AbpTenants_AbpEditions_EditionId)
        /// </summary>
        public virtual ICollection<AbpTenant> AbpTenants { get; set; } // AbpTenants.FK_AbpTenants_AbpEditions_EditionId

        public AbpEdition()
        {
            AbpFeatures = new List<AbpFeature>();
            AbpTenants = new List<AbpTenant>();
        }
    }

    // AbpEntityChangeSets
    public class AbpEntityChangeSet
    {
        public long Id { get; set; } // Id (Primary key)
        public string BrowserInfo { get; set; } // BrowserInfo (length: 512)
        public string ClientIpAddress { get; set; } // ClientIpAddress (length: 64)
        public string ClientName { get; set; } // ClientName (length: 128)
        public DateTime CreationTime { get; set; } // CreationTime
        public string ExtensionData { get; set; } // ExtensionData
        public int? ImpersonatorTenantId { get; set; } // ImpersonatorTenantId
        public long? ImpersonatorUserId { get; set; } // ImpersonatorUserId
        public string Reason { get; set; } // Reason (length: 256)
        public int? TenantId { get; set; } // TenantId
        public long? UserId { get; set; } // UserId

        // Reverse navigation

        /// <summary>
        /// Child AbpEntityChanges where [AbpEntityChanges].[EntityChangeSetId] point to this entity (FK_AbpEntityChanges_AbpEntityChangeSets_EntityChangeSetId)
        /// </summary>
        public virtual ICollection<AbpEntityChanx> AbpEntityChanges { get; set; } // AbpEntityChanges.FK_AbpEntityChanges_AbpEntityChangeSets_EntityChangeSetId

        public AbpEntityChangeSet()
        {
            AbpEntityChanges = new List<AbpEntityChanx>();
        }
    }

    // AbpEntityChanges
    public class AbpEntityChanx
    {
        public long Id { get; set; } // Id (Primary key)
        public DateTime ChangeTime { get; set; } // ChangeTime
        public byte ChangeType { get; set; } // ChangeType
        public long EntityChangeSetId { get; set; } // EntityChangeSetId
        public string EntityId { get; set; } // EntityId (length: 48)
        public string EntityTypeFullName { get; set; } // EntityTypeFullName (length: 192)
        public int? TenantId { get; set; } // TenantId

        // Reverse navigation

        /// <summary>
        /// Child AbpEntityPropertyChanges where [AbpEntityPropertyChanges].[EntityChangeId] point to this entity (FK_AbpEntityPropertyChanges_AbpEntityChanges_EntityChangeId)
        /// </summary>
        public virtual ICollection<AbpEntityPropertyChanx> AbpEntityPropertyChanges { get; set; } // AbpEntityPropertyChanges.FK_AbpEntityPropertyChanges_AbpEntityChanges_EntityChangeId

        // Foreign keys

        /// <summary>
        /// Parent AbpEntityChangeSet pointed by [AbpEntityChanges].([EntityChangeSetId]) (FK_AbpEntityChanges_AbpEntityChangeSets_EntityChangeSetId)
        /// </summary>
        public virtual AbpEntityChangeSet AbpEntityChangeSet { get; set; } // FK_AbpEntityChanges_AbpEntityChangeSets_EntityChangeSetId

        public AbpEntityChanx()
        {
            AbpEntityPropertyChanges = new List<AbpEntityPropertyChanx>();
        }
    }

    // AbpEntityPropertyChanges
    public class AbpEntityPropertyChanx
    {
        public long Id { get; set; } // Id (Primary key)
        public long EntityChangeId { get; set; } // EntityChangeId
        public string NewValue { get; set; } // NewValue (length: 512)
        public string OriginalValue { get; set; } // OriginalValue (length: 512)
        public string PropertyName { get; set; } // PropertyName (length: 96)
        public string PropertyTypeFullName { get; set; } // PropertyTypeFullName (length: 192)
        public int? TenantId { get; set; } // TenantId
        public string NewValueHash { get; set; } // NewValueHash
        public string OriginalValueHash { get; set; } // OriginalValueHash

        // Foreign keys

        /// <summary>
        /// Parent AbpEntityChanx pointed by [AbpEntityPropertyChanges].([EntityChangeId]) (FK_AbpEntityPropertyChanges_AbpEntityChanges_EntityChangeId)
        /// </summary>
        public virtual AbpEntityChanx AbpEntityChanx { get; set; } // FK_AbpEntityPropertyChanges_AbpEntityChanges_EntityChangeId
    }

    // AbpFeatures
    public class AbpFeature
    {
        public long Id { get; set; } // Id (Primary key)
        public DateTime CreationTime { get; set; } // CreationTime
        public long? CreatorUserId { get; set; } // CreatorUserId
        public string Discriminator { get; set; } // Discriminator
        public string Name { get; set; } // Name (length: 128)
        public string Value { get; set; } // Value (length: 2000)
        public int? EditionId { get; set; } // EditionId
        public int? TenantId { get; set; } // TenantId

        // Foreign keys

        /// <summary>
        /// Parent AbpEdition pointed by [AbpFeatures].([EditionId]) (FK_AbpFeatures_AbpEditions_EditionId)
        /// </summary>
        public virtual AbpEdition AbpEdition { get; set; } // FK_AbpFeatures_AbpEditions_EditionId
    }

    // AbpLanguages
    public class AbpLanguage
    {
        public int Id { get; set; } // Id (Primary key)
        public DateTime CreationTime { get; set; } // CreationTime
        public long? CreatorUserId { get; set; } // CreatorUserId
        public long? DeleterUserId { get; set; } // DeleterUserId
        public DateTime? DeletionTime { get; set; } // DeletionTime
        public string DisplayName { get; set; } // DisplayName (length: 64)
        public string Icon { get; set; } // Icon (length: 128)
        public bool IsDeleted { get; set; } // IsDeleted
        public DateTime? LastModificationTime { get; set; } // LastModificationTime
        public long? LastModifierUserId { get; set; } // LastModifierUserId
        public string Name { get; set; } // Name (length: 128)
        public int? TenantId { get; set; } // TenantId
        public bool IsDisabled { get; set; } // IsDisabled

        public AbpLanguage()
        {
            IsDisabled = true;
        }
    }

    // AbpLanguageTexts
    public class AbpLanguageText
    {
        public long Id { get; set; } // Id (Primary key)
        public DateTime CreationTime { get; set; } // CreationTime
        public long? CreatorUserId { get; set; } // CreatorUserId
        public string Key { get; set; } // Key (length: 256)
        public string LanguageName { get; set; } // LanguageName (length: 128)
        public DateTime? LastModificationTime { get; set; } // LastModificationTime
        public long? LastModifierUserId { get; set; } // LastModifierUserId
        public string Source { get; set; } // Source (length: 128)
        public int? TenantId { get; set; } // TenantId
        public string Value { get; set; } // Value
    }

    // AbpNotifications
    public class AbpNotification
    {
        public Guid Id { get; set; } // Id (Primary key)
        public DateTime CreationTime { get; set; } // CreationTime
        public long? CreatorUserId { get; set; } // CreatorUserId
        public string Data { get; set; } // Data
        public string DataTypeName { get; set; } // DataTypeName (length: 512)
        public string EntityId { get; set; } // EntityId (length: 96)
        public string EntityTypeAssemblyQualifiedName { get; set; } // EntityTypeAssemblyQualifiedName (length: 512)
        public string EntityTypeName { get; set; } // EntityTypeName (length: 250)
        public string ExcludedUserIds { get; set; } // ExcludedUserIds
        public string NotificationName { get; set; } // NotificationName (length: 96)
        public byte Severity { get; set; } // Severity
        public string TenantIds { get; set; } // TenantIds
        public string UserIds { get; set; } // UserIds
    }

    // AbpNotificationSubscriptions
    public class AbpNotificationSubscription
    {
        public Guid Id { get; set; } // Id (Primary key)
        public DateTime CreationTime { get; set; } // CreationTime
        public long? CreatorUserId { get; set; } // CreatorUserId
        public string EntityId { get; set; } // EntityId (length: 96)
        public string EntityTypeAssemblyQualifiedName { get; set; } // EntityTypeAssemblyQualifiedName (length: 512)
        public string EntityTypeName { get; set; } // EntityTypeName (length: 250)
        public string NotificationName { get; set; } // NotificationName (length: 96)
        public int? TenantId { get; set; } // TenantId
        public long UserId { get; set; } // UserId
    }

    // AbpOrganizationUnits
    public class AbpOrganizationUnit
    {
        public long Id { get; set; } // Id (Primary key)
        public string Code { get; set; } // Code (length: 95)
        public DateTime CreationTime { get; set; } // CreationTime
        public long? CreatorUserId { get; set; } // CreatorUserId
        public long? DeleterUserId { get; set; } // DeleterUserId
        public DateTime? DeletionTime { get; set; } // DeletionTime
        public string DisplayName { get; set; } // DisplayName (length: 128)
        public bool IsDeleted { get; set; } // IsDeleted
        public DateTime? LastModificationTime { get; set; } // LastModificationTime
        public long? LastModifierUserId { get; set; } // LastModifierUserId
        public long? ParentId { get; set; } // ParentId
        public int? TenantId { get; set; } // TenantId

        // Reverse navigation

        /// <summary>
        /// Child AbpOrganizationUnits where [AbpOrganizationUnits].[ParentId] point to this entity (FK_AbpOrganizationUnits_AbpOrganizationUnits_ParentId)
        /// </summary>
        public virtual ICollection<AbpOrganizationUnit> AbpOrganizationUnits { get; set; } // AbpOrganizationUnits.FK_AbpOrganizationUnits_AbpOrganizationUnits_ParentId

        // Foreign keys

        /// <summary>
        /// Parent AbpOrganizationUnit pointed by [AbpOrganizationUnits].([ParentId]) (FK_AbpOrganizationUnits_AbpOrganizationUnits_ParentId)
        /// </summary>
        public virtual AbpOrganizationUnit Parent { get; set; } // FK_AbpOrganizationUnits_AbpOrganizationUnits_ParentId

        public AbpOrganizationUnit()
        {
            AbpOrganizationUnits = new List<AbpOrganizationUnit>();
        }
    }

    // AbpOrganizationUnitRoles
    public class AbpOrganizationUnitRole
    {
        public long Id { get; set; } // Id (Primary key)
        public DateTime CreationTime { get; set; } // CreationTime
        public long? CreatorUserId { get; set; } // CreatorUserId
        public int? TenantId { get; set; } // TenantId
        public int RoleId { get; set; } // RoleId
        public long OrganizationUnitId { get; set; } // OrganizationUnitId
        public bool IsDeleted { get; set; } // IsDeleted
    }

    // AbpPermissions
    public class AbpPermission
    {
        public long Id { get; set; } // Id (Primary key)
        public DateTime CreationTime { get; set; } // CreationTime
        public long? CreatorUserId { get; set; } // CreatorUserId
        public string Discriminator { get; set; } // Discriminator
        public bool IsGranted { get; set; } // IsGranted
        public string Name { get; set; } // Name (length: 128)
        public int? TenantId { get; set; } // TenantId
        public int? RoleId { get; set; } // RoleId
        public long? UserId { get; set; } // UserId

        // Foreign keys

        /// <summary>
        /// Parent AbpRole pointed by [AbpPermissions].([RoleId]) (FK_AbpPermissions_AbpRoles_RoleId)
        /// </summary>
        public virtual AbpRole AbpRole { get; set; } // FK_AbpPermissions_AbpRoles_RoleId

        /// <summary>
        /// Parent AbpUser pointed by [AbpPermissions].([UserId]) (FK_AbpPermissions_AbpUsers_UserId)
        /// </summary>
        public virtual AbpUser AbpUser { get; set; } // FK_AbpPermissions_AbpUsers_UserId
    }

    // AbpRoles
    public class AbpRole
    {
        public int Id { get; set; } // Id (Primary key)
        public string ConcurrencyStamp { get; set; } // ConcurrencyStamp (length: 128)
        public DateTime CreationTime { get; set; } // CreationTime
        public long? CreatorUserId { get; set; } // CreatorUserId
        public long? DeleterUserId { get; set; } // DeleterUserId
        public DateTime? DeletionTime { get; set; } // DeletionTime
        public string DisplayName { get; set; } // DisplayName (length: 64)
        public bool IsDefault { get; set; } // IsDefault
        public bool IsDeleted { get; set; } // IsDeleted
        public bool IsStatic { get; set; } // IsStatic
        public DateTime? LastModificationTime { get; set; } // LastModificationTime
        public long? LastModifierUserId { get; set; } // LastModifierUserId
        public string Name { get; set; } // Name (length: 32)
        public string NormalizedName { get; set; } // NormalizedName (length: 32)
        public int? TenantId { get; set; } // TenantId
        public string Description { get; set; } // Description

        // Reverse navigation

        /// <summary>
        /// Child AbpPermissions where [AbpPermissions].[RoleId] point to this entity (FK_AbpPermissions_AbpRoles_RoleId)
        /// </summary>
        public virtual ICollection<AbpPermission> AbpPermissions { get; set; } // AbpPermissions.FK_AbpPermissions_AbpRoles_RoleId

        /// <summary>
        /// Child AbpRoleClaims where [AbpRoleClaims].[RoleId] point to this entity (FK_AbpRoleClaims_AbpRoles_RoleId)
        /// </summary>
        public virtual ICollection<AbpRoleClaim> AbpRoleClaims { get; set; } // AbpRoleClaims.FK_AbpRoleClaims_AbpRoles_RoleId

        // Foreign keys

        /// <summary>
        /// Parent AbpUser pointed by [AbpRoles].([CreatorUserId]) (FK_AbpRoles_AbpUsers_CreatorUserId)
        /// </summary>
        public virtual AbpUser CreatorUser { get; set; } // FK_AbpRoles_AbpUsers_CreatorUserId

        /// <summary>
        /// Parent AbpUser pointed by [AbpRoles].([DeleterUserId]) (FK_AbpRoles_AbpUsers_DeleterUserId)
        /// </summary>
        public virtual AbpUser DeleterUser { get; set; } // FK_AbpRoles_AbpUsers_DeleterUserId

        /// <summary>
        /// Parent AbpUser pointed by [AbpRoles].([LastModifierUserId]) (FK_AbpRoles_AbpUsers_LastModifierUserId)
        /// </summary>
        public virtual AbpUser LastModifierUser { get; set; } // FK_AbpRoles_AbpUsers_LastModifierUserId

        public AbpRole()
        {
            AbpPermissions = new List<AbpPermission>();
            AbpRoleClaims = new List<AbpRoleClaim>();
        }
    }

    // AbpRoleClaims
    public class AbpRoleClaim
    {
        public long Id { get; set; } // Id (Primary key)
        public string ClaimType { get; set; } // ClaimType (length: 256)
        public string ClaimValue { get; set; } // ClaimValue
        public DateTime CreationTime { get; set; } // CreationTime
        public long? CreatorUserId { get; set; } // CreatorUserId
        public int RoleId { get; set; } // RoleId
        public int? TenantId { get; set; } // TenantId

        // Foreign keys

        /// <summary>
        /// Parent AbpRole pointed by [AbpRoleClaims].([RoleId]) (FK_AbpRoleClaims_AbpRoles_RoleId)
        /// </summary>
        public virtual AbpRole AbpRole { get; set; } // FK_AbpRoleClaims_AbpRoles_RoleId
    }

    // AbpSettings
    public class AbpSetting
    {
        public long Id { get; set; } // Id (Primary key)
        public DateTime CreationTime { get; set; } // CreationTime
        public long? CreatorUserId { get; set; } // CreatorUserId
        public DateTime? LastModificationTime { get; set; } // LastModificationTime
        public long? LastModifierUserId { get; set; } // LastModifierUserId
        public string Name { get; set; } // Name (length: 256)
        public int? TenantId { get; set; } // TenantId
        public long? UserId { get; set; } // UserId
        public string Value { get; set; } // Value

        // Foreign keys

        /// <summary>
        /// Parent AbpUser pointed by [AbpSettings].([UserId]) (FK_AbpSettings_AbpUsers_UserId)
        /// </summary>
        public virtual AbpUser AbpUser { get; set; } // FK_AbpSettings_AbpUsers_UserId
    }

    // AbpTenants
    public class AbpTenant
    {
        public int Id { get; set; } // Id (Primary key)
        public string ConnectionString { get; set; } // ConnectionString (length: 1024)
        public DateTime CreationTime { get; set; } // CreationTime
        public long? CreatorUserId { get; set; } // CreatorUserId
        public long? DeleterUserId { get; set; } // DeleterUserId
        public DateTime? DeletionTime { get; set; } // DeletionTime
        public int? EditionId { get; set; } // EditionId
        public bool IsActive { get; set; } // IsActive
        public bool IsDeleted { get; set; } // IsDeleted
        public DateTime? LastModificationTime { get; set; } // LastModificationTime
        public long? LastModifierUserId { get; set; } // LastModifierUserId
        public string Name { get; set; } // Name (length: 128)
        public string TenancyName { get; set; } // TenancyName (length: 64)

        // Foreign keys

        /// <summary>
        /// Parent AbpEdition pointed by [AbpTenants].([EditionId]) (FK_AbpTenants_AbpEditions_EditionId)
        /// </summary>
        public virtual AbpEdition AbpEdition { get; set; } // FK_AbpTenants_AbpEditions_EditionId

        /// <summary>
        /// Parent AbpUser pointed by [AbpTenants].([CreatorUserId]) (FK_AbpTenants_AbpUsers_CreatorUserId)
        /// </summary>
        public virtual AbpUser CreatorUser { get; set; } // FK_AbpTenants_AbpUsers_CreatorUserId

        /// <summary>
        /// Parent AbpUser pointed by [AbpTenants].([DeleterUserId]) (FK_AbpTenants_AbpUsers_DeleterUserId)
        /// </summary>
        public virtual AbpUser DeleterUser { get; set; } // FK_AbpTenants_AbpUsers_DeleterUserId

        /// <summary>
        /// Parent AbpUser pointed by [AbpTenants].([LastModifierUserId]) (FK_AbpTenants_AbpUsers_LastModifierUserId)
        /// </summary>
        public virtual AbpUser LastModifierUser { get; set; } // FK_AbpTenants_AbpUsers_LastModifierUserId
    }

    // AbpTenantNotifications
    public class AbpTenantNotification
    {
        public Guid Id { get; set; } // Id (Primary key)
        public DateTime CreationTime { get; set; } // CreationTime
        public long? CreatorUserId { get; set; } // CreatorUserId
        public string Data { get; set; } // Data
        public string DataTypeName { get; set; } // DataTypeName (length: 512)
        public string EntityId { get; set; } // EntityId (length: 96)
        public string EntityTypeAssemblyQualifiedName { get; set; } // EntityTypeAssemblyQualifiedName (length: 512)
        public string EntityTypeName { get; set; } // EntityTypeName (length: 250)
        public string NotificationName { get; set; } // NotificationName (length: 96)
        public byte Severity { get; set; } // Severity
        public int? TenantId { get; set; } // TenantId
    }

    // AbpUsers
    public class AbpUser
    {
        public long Id { get; set; } // Id (Primary key)
        public int AccessFailedCount { get; set; } // AccessFailedCount
        public string AuthenticationSource { get; set; } // AuthenticationSource (length: 64)
        public string ConcurrencyStamp { get; set; } // ConcurrencyStamp (length: 128)
        public DateTime CreationTime { get; set; } // CreationTime
        public long? CreatorUserId { get; set; } // CreatorUserId
        public long? DeleterUserId { get; set; } // DeleterUserId
        public DateTime? DeletionTime { get; set; } // DeletionTime
        public string EmailAddress { get; set; } // EmailAddress (length: 256)
        public string EmailConfirmationCode { get; set; } // EmailConfirmationCode (length: 328)
        public bool IsActive { get; set; } // IsActive
        public bool IsDeleted { get; set; } // IsDeleted
        public bool IsEmailConfirmed { get; set; } // IsEmailConfirmed
        public bool IsLockoutEnabled { get; set; } // IsLockoutEnabled
        public bool IsPhoneNumberConfirmed { get; set; } // IsPhoneNumberConfirmed
        public bool IsTwoFactorEnabled { get; set; } // IsTwoFactorEnabled
        public DateTime? LastModificationTime { get; set; } // LastModificationTime
        public long? LastModifierUserId { get; set; } // LastModifierUserId
        public DateTime? LockoutEndDateUtc { get; set; } // LockoutEndDateUtc
        public string Name { get; set; } // Name (length: 64)
        public string NormalizedEmailAddress { get; set; } // NormalizedEmailAddress (length: 256)
        public string NormalizedUserName { get; set; } // NormalizedUserName (length: 256)
        public string Password { get; set; } // Password (length: 128)
        public string PasswordResetCode { get; set; } // PasswordResetCode (length: 328)
        public string PhoneNumber { get; set; } // PhoneNumber (length: 32)
        public string SecurityStamp { get; set; } // SecurityStamp (length: 128)
        public string Surname { get; set; } // Surname (length: 64)
        public int? TenantId { get; set; } // TenantId
        public string UserName { get; set; } // UserName (length: 256)

        // Reverse navigation

        /// <summary>
        /// Child AbpPermissions where [AbpPermissions].[UserId] point to this entity (FK_AbpPermissions_AbpUsers_UserId)
        /// </summary>
        public virtual ICollection<AbpPermission> AbpPermissions { get; set; } // AbpPermissions.FK_AbpPermissions_AbpUsers_UserId

        /// <summary>
        /// Child AbpRoles where [AbpRoles].[CreatorUserId] point to this entity (FK_AbpRoles_AbpUsers_CreatorUserId)
        /// </summary>
        public virtual ICollection<AbpRole> AbpRoles_CreatorUserId { get; set; } // AbpRoles.FK_AbpRoles_AbpUsers_CreatorUserId

        /// <summary>
        /// Child AbpRoles where [AbpRoles].[DeleterUserId] point to this entity (FK_AbpRoles_AbpUsers_DeleterUserId)
        /// </summary>
        public virtual ICollection<AbpRole> AbpRoles_DeleterUserId { get; set; } // AbpRoles.FK_AbpRoles_AbpUsers_DeleterUserId

        /// <summary>
        /// Child AbpRoles where [AbpRoles].[LastModifierUserId] point to this entity (FK_AbpRoles_AbpUsers_LastModifierUserId)
        /// </summary>
        public virtual ICollection<AbpRole> AbpRoles_LastModifierUserId { get; set; } // AbpRoles.FK_AbpRoles_AbpUsers_LastModifierUserId

        /// <summary>
        /// Child AbpSettings where [AbpSettings].[UserId] point to this entity (FK_AbpSettings_AbpUsers_UserId)
        /// </summary>
        public virtual ICollection<AbpSetting> AbpSettings { get; set; } // AbpSettings.FK_AbpSettings_AbpUsers_UserId

        /// <summary>
        /// Child AbpTenants where [AbpTenants].[CreatorUserId] point to this entity (FK_AbpTenants_AbpUsers_CreatorUserId)
        /// </summary>
        public virtual ICollection<AbpTenant> AbpTenants_CreatorUserId { get; set; } // AbpTenants.FK_AbpTenants_AbpUsers_CreatorUserId

        /// <summary>
        /// Child AbpTenants where [AbpTenants].[DeleterUserId] point to this entity (FK_AbpTenants_AbpUsers_DeleterUserId)
        /// </summary>
        public virtual ICollection<AbpTenant> AbpTenants_DeleterUserId { get; set; } // AbpTenants.FK_AbpTenants_AbpUsers_DeleterUserId

        /// <summary>
        /// Child AbpTenants where [AbpTenants].[LastModifierUserId] point to this entity (FK_AbpTenants_AbpUsers_LastModifierUserId)
        /// </summary>
        public virtual ICollection<AbpTenant> AbpTenants_LastModifierUserId { get; set; } // AbpTenants.FK_AbpTenants_AbpUsers_LastModifierUserId

        /// <summary>
        /// Child AbpUsers where [AbpUsers].[CreatorUserId] point to this entity (FK_AbpUsers_AbpUsers_CreatorUserId)
        /// </summary>
        public virtual ICollection<AbpUser> AbpUsers_CreatorUserId { get; set; } // AbpUsers.FK_AbpUsers_AbpUsers_CreatorUserId

        /// <summary>
        /// Child AbpUsers where [AbpUsers].[DeleterUserId] point to this entity (FK_AbpUsers_AbpUsers_DeleterUserId)
        /// </summary>
        public virtual ICollection<AbpUser> AbpUsers_DeleterUserId { get; set; } // AbpUsers.FK_AbpUsers_AbpUsers_DeleterUserId

        /// <summary>
        /// Child AbpUsers where [AbpUsers].[LastModifierUserId] point to this entity (FK_AbpUsers_AbpUsers_LastModifierUserId)
        /// </summary>
        public virtual ICollection<AbpUser> AbpUsers_LastModifierUserId { get; set; } // AbpUsers.FK_AbpUsers_AbpUsers_LastModifierUserId

        /// <summary>
        /// Child AbpUserClaims where [AbpUserClaims].[UserId] point to this entity (FK_AbpUserClaims_AbpUsers_UserId)
        /// </summary>
        public virtual ICollection<AbpUserClaim> AbpUserClaims { get; set; } // AbpUserClaims.FK_AbpUserClaims_AbpUsers_UserId

        /// <summary>
        /// Child AbpUserLogins where [AbpUserLogins].[UserId] point to this entity (FK_AbpUserLogins_AbpUsers_UserId)
        /// </summary>
        public virtual ICollection<AbpUserLogin> AbpUserLogins { get; set; } // AbpUserLogins.FK_AbpUserLogins_AbpUsers_UserId

        /// <summary>
        /// Child AbpUserRoles where [AbpUserRoles].[UserId] point to this entity (FK_AbpUserRoles_AbpUsers_UserId)
        /// </summary>
        public virtual ICollection<AbpUserRole> AbpUserRoles { get; set; } // AbpUserRoles.FK_AbpUserRoles_AbpUsers_UserId

        /// <summary>
        /// Child AbpUserTokens where [AbpUserTokens].[UserId] point to this entity (FK_AbpUserTokens_AbpUsers_UserId)
        /// </summary>
        public virtual ICollection<AbpUserToken> AbpUserTokens { get; set; } // AbpUserTokens.FK_AbpUserTokens_AbpUsers_UserId

        // Foreign keys

        /// <summary>
        /// Parent AbpUser pointed by [AbpUsers].([DeleterUserId]) (FK_AbpUsers_AbpUsers_DeleterUserId)
        /// </summary>
        public virtual AbpUser AbpUser_DeleterUserId { get; set; } // FK_AbpUsers_AbpUsers_DeleterUserId

        /// <summary>
        /// Parent AbpUser pointed by [AbpUsers].([LastModifierUserId]) (FK_AbpUsers_AbpUsers_LastModifierUserId)
        /// </summary>
        public virtual AbpUser AbpUser_LastModifierUserId { get; set; } // FK_AbpUsers_AbpUsers_LastModifierUserId

        /// <summary>
        /// Parent AbpUser pointed by [AbpUsers].([CreatorUserId]) (FK_AbpUsers_AbpUsers_CreatorUserId)
        /// </summary>
        public virtual AbpUser CreatorUser { get; set; } // FK_AbpUsers_AbpUsers_CreatorUserId

        public AbpUser()
        {
            AbpPermissions = new List<AbpPermission>();
            AbpRoles_CreatorUserId = new List<AbpRole>();
            AbpRoles_DeleterUserId = new List<AbpRole>();
            AbpRoles_LastModifierUserId = new List<AbpRole>();
            AbpSettings = new List<AbpSetting>();
            AbpTenants_CreatorUserId = new List<AbpTenant>();
            AbpTenants_DeleterUserId = new List<AbpTenant>();
            AbpTenants_LastModifierUserId = new List<AbpTenant>();
            AbpUserClaims = new List<AbpUserClaim>();
            AbpUserLogins = new List<AbpUserLogin>();
            AbpUserRoles = new List<AbpUserRole>();
            AbpUsers_CreatorUserId = new List<AbpUser>();
            AbpUsers_DeleterUserId = new List<AbpUser>();
            AbpUsers_LastModifierUserId = new List<AbpUser>();
            AbpUserTokens = new List<AbpUserToken>();
        }
    }

    // AbpUserAccounts
    public class AbpUserAccount
    {
        public long Id { get; set; } // Id (Primary key)
        public DateTime CreationTime { get; set; } // CreationTime
        public long? CreatorUserId { get; set; } // CreatorUserId
        public long? DeleterUserId { get; set; } // DeleterUserId
        public DateTime? DeletionTime { get; set; } // DeletionTime
        public string EmailAddress { get; set; } // EmailAddress (length: 256)
        public bool IsDeleted { get; set; } // IsDeleted
        public DateTime? LastModificationTime { get; set; } // LastModificationTime
        public long? LastModifierUserId { get; set; } // LastModifierUserId
        public int? TenantId { get; set; } // TenantId
        public long UserId { get; set; } // UserId
        public long? UserLinkId { get; set; } // UserLinkId
        public string UserName { get; set; } // UserName (length: 256)
    }

    // AbpUserClaims
    public class AbpUserClaim
    {
        public long Id { get; set; } // Id (Primary key)
        public string ClaimType { get; set; } // ClaimType (length: 256)
        public string ClaimValue { get; set; } // ClaimValue
        public DateTime CreationTime { get; set; } // CreationTime
        public long? CreatorUserId { get; set; } // CreatorUserId
        public int? TenantId { get; set; } // TenantId
        public long UserId { get; set; } // UserId

        // Foreign keys

        /// <summary>
        /// Parent AbpUser pointed by [AbpUserClaims].([UserId]) (FK_AbpUserClaims_AbpUsers_UserId)
        /// </summary>
        public virtual AbpUser AbpUser { get; set; } // FK_AbpUserClaims_AbpUsers_UserId
    }

    // AbpUserLogins
    public class AbpUserLogin
    {
        public long Id { get; set; } // Id (Primary key)
        public string LoginProvider { get; set; } // LoginProvider (length: 128)
        public string ProviderKey { get; set; } // ProviderKey (length: 256)
        public int? TenantId { get; set; } // TenantId
        public long UserId { get; set; } // UserId

        // Foreign keys

        /// <summary>
        /// Parent AbpUser pointed by [AbpUserLogins].([UserId]) (FK_AbpUserLogins_AbpUsers_UserId)
        /// </summary>
        public virtual AbpUser AbpUser { get; set; } // FK_AbpUserLogins_AbpUsers_UserId
    }

    // AbpUserLoginAttempts
    public class AbpUserLoginAttempt
    {
        public long Id { get; set; } // Id (Primary key)
        public string BrowserInfo { get; set; } // BrowserInfo (length: 512)
        public string ClientIpAddress { get; set; } // ClientIpAddress (length: 64)
        public string ClientName { get; set; } // ClientName (length: 128)
        public DateTime CreationTime { get; set; } // CreationTime
        public byte Result { get; set; } // Result
        public string TenancyName { get; set; } // TenancyName (length: 64)
        public int? TenantId { get; set; } // TenantId
        public long? UserId { get; set; } // UserId
        public string UserNameOrEmailAddress { get; set; } // UserNameOrEmailAddress (length: 256)
    }

    // AbpUserNotifications
    public class AbpUserNotification
    {
        public Guid Id { get; set; } // Id (Primary key)
        public DateTime CreationTime { get; set; } // CreationTime
        public int State { get; set; } // State
        public int? TenantId { get; set; } // TenantId
        public Guid TenantNotificationId { get; set; } // TenantNotificationId
        public long UserId { get; set; } // UserId
    }

    // AbpUserOrganizationUnits
    public class AbpUserOrganizationUnit
    {
        public long Id { get; set; } // Id (Primary key)
        public DateTime CreationTime { get; set; } // CreationTime
        public long? CreatorUserId { get; set; } // CreatorUserId
        public long OrganizationUnitId { get; set; } // OrganizationUnitId
        public int? TenantId { get; set; } // TenantId
        public long UserId { get; set; } // UserId
        public bool IsDeleted { get; set; } // IsDeleted

        public AbpUserOrganizationUnit()
        {
            IsDeleted = true;
        }
    }

    // AbpUserRoles
    public class AbpUserRole
    {
        public long Id { get; set; } // Id (Primary key)
        public DateTime CreationTime { get; set; } // CreationTime
        public long? CreatorUserId { get; set; } // CreatorUserId
        public int RoleId { get; set; } // RoleId
        public int? TenantId { get; set; } // TenantId
        public long UserId { get; set; } // UserId

        // Foreign keys

        /// <summary>
        /// Parent AbpUser pointed by [AbpUserRoles].([UserId]) (FK_AbpUserRoles_AbpUsers_UserId)
        /// </summary>
        public virtual AbpUser AbpUser { get; set; } // FK_AbpUserRoles_AbpUsers_UserId
    }

    // AbpUserTokens
    public class AbpUserToken
    {
        public long Id { get; set; } // Id (Primary key)
        public string LoginProvider { get; set; } // LoginProvider (length: 128)
        public string Name { get; set; } // Name (length: 128)
        public int? TenantId { get; set; } // TenantId
        public long UserId { get; set; } // UserId
        public string Value { get; set; } // Value (length: 512)
        public DateTime? ExpireDate { get; set; } // ExpireDate

        // Foreign keys

        /// <summary>
        /// Parent AbpUser pointed by [AbpUserTokens].([UserId]) (FK_AbpUserTokens_AbpUsers_UserId)
        /// </summary>
        public virtual AbpUser AbpUser { get; set; } // FK_AbpUserTokens_AbpUsers_UserId
    }

    // AbpWebhookEvents
    public class AbpWebhookEvent
    {
        public Guid Id { get; set; } // Id (Primary key)
        public string WebhookName { get; set; } // WebhookName
        public string Data { get; set; } // Data
        public DateTime CreationTime { get; set; } // CreationTime
        public int? TenantId { get; set; } // TenantId
        public bool IsDeleted { get; set; } // IsDeleted
        public DateTime? DeletionTime { get; set; } // DeletionTime

        // Reverse navigation

        /// <summary>
        /// Child AbpWebhookSendAttempts where [AbpWebhookSendAttempts].[WebhookEventId] point to this entity (FK_AbpWebhookSendAttempts_AbpWebhookEvents_WebhookEventId)
        /// </summary>
        public virtual ICollection<AbpWebhookSendAttempt> AbpWebhookSendAttempts { get; set; } // AbpWebhookSendAttempts.FK_AbpWebhookSendAttempts_AbpWebhookEvents_WebhookEventId

        public AbpWebhookEvent()
        {
            AbpWebhookSendAttempts = new List<AbpWebhookSendAttempt>();
        }
    }

    // AbpWebhookSendAttempts
    public class AbpWebhookSendAttempt
    {
        public Guid Id { get; set; } // Id (Primary key)
        public Guid WebhookEventId { get; set; } // WebhookEventId
        public Guid WebhookSubscriptionId { get; set; } // WebhookSubscriptionId
        public string Response { get; set; } // Response
        public int? ResponseStatusCode { get; set; } // ResponseStatusCode
        public DateTime CreationTime { get; set; } // CreationTime
        public DateTime? LastModificationTime { get; set; } // LastModificationTime
        public int? TenantId { get; set; } // TenantId

        // Foreign keys

        /// <summary>
        /// Parent AbpWebhookEvent pointed by [AbpWebhookSendAttempts].([WebhookEventId]) (FK_AbpWebhookSendAttempts_AbpWebhookEvents_WebhookEventId)
        /// </summary>
        public virtual AbpWebhookEvent AbpWebhookEvent { get; set; } // FK_AbpWebhookSendAttempts_AbpWebhookEvents_WebhookEventId
    }

    // AbpWebhookSubscriptions
    public class AbpWebhookSubscription
    {
        public Guid Id { get; set; } // Id (Primary key)
        public DateTime CreationTime { get; set; } // CreationTime
        public long? CreatorUserId { get; set; } // CreatorUserId
        public int? TenantId { get; set; } // TenantId
        public string WebhookUri { get; set; } // WebhookUri
        public string Secret { get; set; } // Secret
        public bool IsActive { get; set; } // IsActive
        public string Webhooks { get; set; } // Webhooks
        public string Headers { get; set; } // Headers
    }

    // BlackListUser
    /// <summary>
    /// Bảng chứa các user đặc biệt, cần loại trừ
    /// </summary>
    public class BlackListUser
    {
        public int Id { get; set; } // Id (Primary key)
        public string MaNhanVien { get; set; } // MaNhanVien (length: 50)
        public string Username { get; set; } // Username (length: 50)
        public string Email { get; set; } // Email (length: 256)
        public string MoTa { get; set; } // MoTa (length: 500)
    }

    // CreateDisableUserManuals
    public class CreateDisableUserManual
    {
        public int Id { get; set; } // Id (Primary key)
        public string ListMaNhanVien { get; set; } // ListMaNhanVien
        public int ActionType { get; set; } // ActionType
        public DateTime DateCreated { get; set; } // DateCreated
    }

    // Customers
    public class Customer
    {
        public int Id { get; set; } // Id (Primary key)
        public string FirstName { get; set; } // FirstName (length: 255)
        public string LastName { get; set; } // LastName (length: 255)
        public string Contact { get; set; } // Contact (length: 100)
        public string Email { get; set; } // Email (length: 255)
    }

    // HplCreateUserLogs
    /// <summary>
    /// Log lịch sử tạo mới User
    /// </summary>
    public class HplCreateUserLog
    {
        public int NhanVienId { get; set; } // NhanVienId (Primary key)
        public string FirstName { get; set; } // FirstName (length: 256)
        public string LastName { get; set; } // LastName (length: 256)
        public string GioiTinh { get; set; } // GioiTinh (length: 50)
        public string MaNhanVien { get; set; } // MaNhanVien (length: 50)
        public string TenDangNhap { get; set; } // TenDangNhap (length: 50)
        public string Email { get; set; } // Email (length: 256)
        public string EmailCaNhan { get; set; } // EmailCaNhan (length: 256)
        public string DienThoai { get; set; } // DienThoai (length: 50)
        public string Cmtnd { get; set; } // CMTND (length: 50)
        public string TenChucVu { get; set; } // TenChucVu (length: 256)
        public string TenChucDanh { get; set; } // TenChucDanh (length: 256)
        public int? PhongBanId { get; set; } // PhongBanId
        public string TenPhongBan { get; set; } // TenPhongBan (length: 256)
        public string MaPhongBan { get; set; } // MaPhongBan (length: 50)
        public int? PhongBanCap1Id { get; set; } // PhongBanCap1Id
        public string TenPhongBanCap1 { get; set; } // TenPhongBanCap1 (length: 256)
        public string MaPhongBanCap1 { get; set; } // MaPhongBanCap1 (length: 50)
        public string IsAd { get; set; } // IsAd (length: 50)
        public string IsHrm { get; set; } // IsHrm (length: 50)
        public string IsSaleOnline { get; set; } // IsSaleOnline (length: 50)
        public string IsEmail { get; set; } // IsEmail (length: 50)
        public string LinkHrm { get; set; } // LinkHrm (length: 512)
        public string LinkSaleOnline { get; set; } // LinkSaleOnline (length: 512)
        public string LinkEmail { get; set; } // LinkEmail (length: 512)
        public DateTime? DateCreated { get; set; } // DateCreated

        public HplCreateUserLog()
        {
            DateCreated = DateTime.Now;
        }
    }

    // HplDeleteEmailDoTaoLoi
    public class HplDeleteEmailDoTaoLoi
    {
        public int Id { get; set; } // Id (Primary key)
        public string Email { get; set; } // Email (length: 128)
        public DateTime? DateCreated { get; set; } // DateCreated

        public HplDeleteEmailDoTaoLoi()
        {
            DateCreated = DateTime.Now;
        }
    }

    // HplDisableUserLogs
    /// <summary>
    /// Log lịch sử disable user
    /// </summary>
    public class HplDisableUserLog
    {
        public int Id { get; set; } // Id (Primary key)
        public int? NhanVienId { get; set; } // NhanVienId
        public string MaNhanVien { get; set; } // MaNhanVien (length: 50)
        public string UserName { get; set; } // UserName (length: 50)
        public string Ho { get; set; } // Ho (length: 256)
        public string Ten { get; set; } // Ten (length: 128)
        public string Email { get; set; } // Email (length: 128)
        public string EmailCaNhan { get; set; } // EmailCaNhan (length: 128)
        public string DienThoai { get; set; } // DienThoai (length: 50)
        public string Cmnd { get; set; } // Cmnd (length: 50)
        public int? PhongBanId { get; set; } // PhongBanId
        public string MaPhongBan { get; set; } // MaPhongBan (length: 50)
        public string TenPhongBan { get; set; } // TenPhongBan (length: 256)
        public int? PhongBanCap1Id { get; set; } // PhongBanCap1Id
        public string MaPhongBanCap1 { get; set; } // MaPhongBanCap1 (length: 50)
        public string TenPhongBanCap1 { get; set; } // TenPhongBanCap1 (length: 256)
        public string DisableAd { get; set; } // DisableAd (length: 50)
        public string DeleteEmail { get; set; } // DeleteEmail (length: 50)
        public string LockSaleOnline { get; set; } // LockSaleOnline (length: 50)
        public string LinkHrm { get; set; } // LinkHrm (length: 512)
        public DateTime? DateCreated { get; set; } // DateCreated
        public string JsonLog { get; set; } // JsonLog (length: 1073741823)
    }

    // HplEmailCanXoa31082021
    public class HplEmailCanXoa31082021
    {
        public int Id { get; set; } // Id (Primary key)
        public string Email { get; set; } // Email (length: 500)
        public DateTime DateDeleted { get; set; } // DateDeleted

        public HplEmailCanXoa31082021()
        {
            DateDeleted = DateTime.Now;
        }
    }

    // HplPhongBans
    public class HplPhongBan
    {
        public int Id { get; set; } // Id (Primary key)
        public int PhongBanId { get; set; } // PhongBanId
        public string MaPhongBan { get; set; } // MaPhongBan (length: 50)
        public int? PhongBanParentId { get; set; } // PhongBanParentId
        public string TenPhongBan { get; set; } // TenPhongBan (length: 512)
        public DateTime? CreationTime { get; set; } // CreationTime
        public string MailingList { get; set; } // MailingList (length: 512)
        public DateTime? LastSyncToAd { get; set; } // LastSyncToAd
        public int? BranchId { get; set; } // BranchID
        public string BranchCode { get; set; } // BranchCode (length: 512)
        public string BranchName { get; set; } // BranchName (length: 512)
        public string EmailNotification { get; set; } // EmailNotification (length: 1024)

        public HplPhongBan()
        {
            CreationTime = DateTime.Now;
        }
    }

    // HplPhongBanFlattens
    public class HplPhongBanFlatten
    {
        public int Id { get; set; } // Id (Primary key)
        public int PhongBanId { get; set; } // PhongBanId
        public string TenPhongBan { get; set; } // TenPhongBan (length: 512)
        public string MaPhongBan { get; set; } // MaPhongBan (length: 50)
        public int PhongBanChildId { get; set; } // PhongBanChildId
        public string TenPhongBanChild { get; set; } // TenPhongBanChild (length: 512)
        public string MaPhongBanChild { get; set; } // MaPhongBanChild (length: 50)
        public DateTime DateModified { get; set; } // DateModified
        public int? Depth { get; set; } // Depth
        public string Path { get; set; } // Path (length: 500)

        public HplPhongBanFlatten()
        {
            DateModified = DateTime.Now;
        }
    }

    // HplSyncLogs
    /// <summary>
    /// Log các Object data khi SaveChange vào DB trên HRM hoặc SaleOnle
    /// </summary>
    public class HplSyncLog
    {
        public int LogId { get; set; } // LogId (Primary key)
        public string UserName { get; set; } // UserName (length: 50)
        public string MaNhanVien { get; set; } // MaNhanVien (length: 50)
        public string Payload { get; set; } // Payload (length: 1073741823)
        public string LogForSys { get; set; } // LogForSys (length: 256)
        public DateTime DateCreate { get; set; } // DateCreate

        public HplSyncLog()
        {
            DateCreate = DateTime.Now;
        }
    }

    // HplTestTable
    public class HplTestTable
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (length: 50)
        public string Description { get; set; } // Description (length: 50)
    }

    // The table 'table' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // table
    public class Table
    {
        public int? Id { get; set; } // id
        public int? Parent { get; set; } // parent
    }

    // UserAdInfo
    public class UserAdInfo
    {
        public int Id { get; set; } // Id (Primary key)
        public bool? IsLocked { get; set; } // isLocked
        public bool? IsEnabled { get; set; } // isEnabled
        public string Username { get; set; } // Username (length: 50)
        public string Name { get; set; } // Name (length: 50)
        public string FirstName { get; set; } // FirstName (length: 50)
        public string LastName { get; set; } // LastName (length: 50)
        public string DisplayName { get; set; } // DisplayName (length: 256)
        public string Email { get; set; } // Email (length: 512)
        public string TelePhoneNumber { get; set; } // TelePhoneNumber (length: 50)
        public string EmployeeId { get; set; } // EmployeeId (length: 50)
        public string Title { get; set; } // Title (length: 256)
        public string Department { get; set; } // Department (length: 256)
        public string OuName { get; set; } // OuName (length: 256)
        public string ContainerName { get; set; } // ContainerName (length: 256)
        public string MemberOf { get; set; } // MemberOf (length: 256)
        public string ObjectCategory { get; set; } // ObjectCategory (length: 256)
        public string Description { get; set; } // Description (length: 512)
        public bool? MailFrozen { get; set; } // MailFrozen
        public bool? MailDisabled { get; set; } // MailDisabled
    }


    #endregion

    #region POCO Configuration

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    // AbpAuditLogs
    public class AbpAuditLogConfiguration : IEntityTypeConfiguration<AbpAuditLog>
    {
        public void Configure(EntityTypeBuilder<AbpAuditLog> builder)
        {
            builder.ToTable("AbpAuditLogs", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_AbpAuditLogs").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.BrowserInfo).HasColumnName(@"BrowserInfo").HasColumnType("nvarchar(512)").IsRequired(false).HasMaxLength(512);
            builder.Property(x => x.ClientIpAddress).HasColumnName(@"ClientIpAddress").HasColumnType("nvarchar(64)").IsRequired(false).HasMaxLength(64);
            builder.Property(x => x.ClientName).HasColumnName(@"ClientName").HasColumnType("nvarchar(128)").IsRequired(false).HasMaxLength(128);
            builder.Property(x => x.CustomData).HasColumnName(@"CustomData").HasColumnType("nvarchar(2000)").IsRequired(false).HasMaxLength(2000);
            builder.Property(x => x.Exception).HasColumnName(@"Exception").HasColumnType("nvarchar(2000)").IsRequired(false).HasMaxLength(2000);
            builder.Property(x => x.ExecutionDuration).HasColumnName(@"ExecutionDuration").HasColumnType("int").IsRequired();
            builder.Property(x => x.ExecutionTime).HasColumnName(@"ExecutionTime").HasColumnType("datetime2").IsRequired();
            builder.Property(x => x.ImpersonatorTenantId).HasColumnName(@"ImpersonatorTenantId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ImpersonatorUserId).HasColumnName(@"ImpersonatorUserId").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.MethodName).HasColumnName(@"MethodName").HasColumnType("nvarchar(256)").IsRequired(false).HasMaxLength(256);
            builder.Property(x => x.Parameters).HasColumnName(@"Parameters").HasColumnType("nvarchar(1024)").IsRequired(false).HasMaxLength(1024);
            builder.Property(x => x.ServiceName).HasColumnName(@"ServiceName").HasColumnType("nvarchar(256)").IsRequired(false).HasMaxLength(256);
            builder.Property(x => x.TenantId).HasColumnName(@"TenantId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.ReturnValue).HasColumnName(@"ReturnValue").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.ExceptionMessage).HasColumnName(@"ExceptionMessage").HasColumnType("nvarchar(1024)").IsRequired(false).HasMaxLength(1024);

            builder.HasIndex(x => new { x.TenantId, x.ExecutionDuration }).HasDatabaseName("IX_AbpAuditLogs_TenantId_ExecutionDuration");
            builder.HasIndex(x => new { x.TenantId, x.ExecutionTime }).HasDatabaseName("IX_AbpAuditLogs_TenantId_ExecutionTime");
            builder.HasIndex(x => new { x.TenantId, x.UserId }).HasDatabaseName("IX_AbpAuditLogs_TenantId_UserId");
        }
    }

    // AbpBackgroundJobs
    public class AbpBackgroundJobConfiguration : IEntityTypeConfiguration<AbpBackgroundJob>
    {
        public void Configure(EntityTypeBuilder<AbpBackgroundJob> builder)
        {
            builder.ToTable("AbpBackgroundJobs", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_AbpBackgroundJobs").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CreationTime).HasColumnName(@"CreationTime").HasColumnType("datetime2").IsRequired();
            builder.Property(x => x.CreatorUserId).HasColumnName(@"CreatorUserId").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.IsAbandoned).HasColumnName(@"IsAbandoned").HasColumnType("bit").IsRequired();
            builder.Property(x => x.JobArgs).HasColumnName(@"JobArgs").HasColumnType("nvarchar(max)").IsRequired();
            builder.Property(x => x.JobType).HasColumnName(@"JobType").HasColumnType("nvarchar(512)").IsRequired().HasMaxLength(512);
            builder.Property(x => x.LastTryTime).HasColumnName(@"LastTryTime").HasColumnType("datetime2").IsRequired(false);
            builder.Property(x => x.NextTryTime).HasColumnName(@"NextTryTime").HasColumnType("datetime2").IsRequired();
            builder.Property(x => x.Priority).HasColumnName(@"Priority").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.TryCount).HasColumnName(@"TryCount").HasColumnType("smallint").IsRequired();

            builder.HasIndex(x => new { x.IsAbandoned, x.NextTryTime }).HasDatabaseName("IX_AbpBackgroundJobs_IsAbandoned_NextTryTime");
        }
    }

    // AbpDynamicEntityProperties
    public class AbpDynamicEntityPropertyConfiguration : IEntityTypeConfiguration<AbpDynamicEntityProperty>
    {
        public void Configure(EntityTypeBuilder<AbpDynamicEntityProperty> builder)
        {
            builder.ToTable("AbpDynamicEntityProperties", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_AbpDynamicEntityProperties").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.EntityFullName).HasColumnName(@"EntityFullName").HasColumnType("nvarchar(256)").IsRequired(false).HasMaxLength(256);
            builder.Property(x => x.DynamicPropertyId).HasColumnName(@"DynamicPropertyId").HasColumnType("int").IsRequired();
            builder.Property(x => x.TenantId).HasColumnName(@"TenantId").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.AbpDynamicProperty).WithMany(b => b.AbpDynamicEntityProperties).HasForeignKey(c => c.DynamicPropertyId).HasConstraintName("FK_AbpDynamicEntityProperties_AbpDynamicProperties_DynamicPropertyId");

            builder.HasIndex(x => x.DynamicPropertyId).HasDatabaseName("IX_AbpDynamicEntityProperties_DynamicPropertyId");
            builder.HasIndex(x => new { x.EntityFullName, x.DynamicPropertyId, x.TenantId }).HasDatabaseName("IX_AbpDynamicEntityProperties_EntityFullName_DynamicPropertyId_TenantId").IsUnique();
        }
    }

    // AbpDynamicEntityPropertyValues
    public class AbpDynamicEntityPropertyValueConfiguration : IEntityTypeConfiguration<AbpDynamicEntityPropertyValue>
    {
        public void Configure(EntityTypeBuilder<AbpDynamicEntityPropertyValue> builder)
        {
            builder.ToTable("AbpDynamicEntityPropertyValues", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_AbpDynamicEntityPropertyValues").IsClustered();

            builder.Property(x => x.Value).HasColumnName(@"Value").HasColumnType("nvarchar(max)").IsRequired();
            builder.Property(x => x.EntityId).HasColumnName(@"EntityId").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.DynamicEntityPropertyId).HasColumnName(@"DynamicEntityPropertyId").HasColumnType("int").IsRequired();
            builder.Property(x => x.TenantId).HasColumnName(@"TenantId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();

            // Foreign keys
            builder.HasOne(a => a.AbpDynamicEntityProperty).WithMany(b => b.AbpDynamicEntityPropertyValues).HasForeignKey(c => c.DynamicEntityPropertyId).HasConstraintName("FK_AbpDynamicEntityPropertyValues_AbpDynamicEntityProperties_DynamicEntityPropertyId");

            builder.HasIndex(x => x.DynamicEntityPropertyId).HasDatabaseName("IX_AbpDynamicEntityPropertyValues_DynamicEntityPropertyId");
        }
    }

    // AbpDynamicProperties
    public class AbpDynamicPropertyConfiguration : IEntityTypeConfiguration<AbpDynamicProperty>
    {
        public void Configure(EntityTypeBuilder<AbpDynamicProperty> builder)
        {
            builder.ToTable("AbpDynamicProperties", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_AbpDynamicProperties").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.PropertyName).HasColumnName(@"PropertyName").HasColumnType("nvarchar(256)").IsRequired(false).HasMaxLength(256);
            builder.Property(x => x.InputType).HasColumnName(@"InputType").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.Permission).HasColumnName(@"Permission").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.TenantId).HasColumnName(@"TenantId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DisplayName).HasColumnName(@"DisplayName").HasColumnType("nvarchar(max)").IsRequired(false);

            builder.HasIndex(x => new { x.PropertyName, x.TenantId }).HasDatabaseName("IX_AbpDynamicProperties_PropertyName_TenantId").IsUnique();
        }
    }

    // AbpDynamicPropertyValues
    public class AbpDynamicPropertyValueConfiguration : IEntityTypeConfiguration<AbpDynamicPropertyValue>
    {
        public void Configure(EntityTypeBuilder<AbpDynamicPropertyValue> builder)
        {
            builder.ToTable("AbpDynamicPropertyValues", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_AbpDynamicPropertyValues").IsClustered();

            builder.Property(x => x.Value).HasColumnName(@"Value").HasColumnType("nvarchar(max)").IsRequired();
            builder.Property(x => x.TenantId).HasColumnName(@"TenantId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DynamicPropertyId).HasColumnName(@"DynamicPropertyId").HasColumnType("int").IsRequired();
            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();

            // Foreign keys
            builder.HasOne(a => a.AbpDynamicProperty).WithMany(b => b.AbpDynamicPropertyValues).HasForeignKey(c => c.DynamicPropertyId).HasConstraintName("FK_AbpDynamicPropertyValues_AbpDynamicProperties_DynamicPropertyId");

            builder.HasIndex(x => x.DynamicPropertyId).HasDatabaseName("IX_AbpDynamicPropertyValues_DynamicPropertyId");
        }
    }

    // AbpEditions
    public class AbpEditionConfiguration : IEntityTypeConfiguration<AbpEdition>
    {
        public void Configure(EntityTypeBuilder<AbpEdition> builder)
        {
            builder.ToTable("AbpEditions", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_AbpEditions").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CreationTime).HasColumnName(@"CreationTime").HasColumnType("datetime2").IsRequired();
            builder.Property(x => x.CreatorUserId).HasColumnName(@"CreatorUserId").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.DeleterUserId).HasColumnName(@"DeleterUserId").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.DeletionTime).HasColumnName(@"DeletionTime").HasColumnType("datetime2").IsRequired(false);
            builder.Property(x => x.DisplayName).HasColumnName(@"DisplayName").HasColumnType("nvarchar(64)").IsRequired().HasMaxLength(64);
            builder.Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsRequired();
            builder.Property(x => x.LastModificationTime).HasColumnName(@"LastModificationTime").HasColumnType("datetime2").IsRequired(false);
            builder.Property(x => x.LastModifierUserId).HasColumnName(@"LastModifierUserId").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar(32)").IsRequired().HasMaxLength(32);
        }
    }

    // AbpEntityChangeSets
    public class AbpEntityChangeSetConfiguration : IEntityTypeConfiguration<AbpEntityChangeSet>
    {
        public void Configure(EntityTypeBuilder<AbpEntityChangeSet> builder)
        {
            builder.ToTable("AbpEntityChangeSets", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_AbpEntityChangeSets").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.BrowserInfo).HasColumnName(@"BrowserInfo").HasColumnType("nvarchar(512)").IsRequired(false).HasMaxLength(512);
            builder.Property(x => x.ClientIpAddress).HasColumnName(@"ClientIpAddress").HasColumnType("nvarchar(64)").IsRequired(false).HasMaxLength(64);
            builder.Property(x => x.ClientName).HasColumnName(@"ClientName").HasColumnType("nvarchar(128)").IsRequired(false).HasMaxLength(128);
            builder.Property(x => x.CreationTime).HasColumnName(@"CreationTime").HasColumnType("datetime2").IsRequired();
            builder.Property(x => x.ExtensionData).HasColumnName(@"ExtensionData").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.ImpersonatorTenantId).HasColumnName(@"ImpersonatorTenantId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ImpersonatorUserId).HasColumnName(@"ImpersonatorUserId").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.Reason).HasColumnName(@"Reason").HasColumnType("nvarchar(256)").IsRequired(false).HasMaxLength(256);
            builder.Property(x => x.TenantId).HasColumnName(@"TenantId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("bigint").IsRequired(false);

            builder.HasIndex(x => new { x.TenantId, x.CreationTime }).HasDatabaseName("IX_AbpEntityChangeSets_TenantId_CreationTime");
            builder.HasIndex(x => new { x.TenantId, x.Reason }).HasDatabaseName("IX_AbpEntityChangeSets_TenantId_Reason");
            builder.HasIndex(x => new { x.TenantId, x.UserId }).HasDatabaseName("IX_AbpEntityChangeSets_TenantId_UserId");
        }
    }

    // AbpEntityChanges
    public class AbpEntityChanxConfiguration : IEntityTypeConfiguration<AbpEntityChanx>
    {
        public void Configure(EntityTypeBuilder<AbpEntityChanx> builder)
        {
            builder.ToTable("AbpEntityChanges", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_AbpEntityChanges").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.ChangeTime).HasColumnName(@"ChangeTime").HasColumnType("datetime2").IsRequired();
            builder.Property(x => x.ChangeType).HasColumnName(@"ChangeType").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.EntityChangeSetId).HasColumnName(@"EntityChangeSetId").HasColumnType("bigint").IsRequired();
            builder.Property(x => x.EntityId).HasColumnName(@"EntityId").HasColumnType("nvarchar(48)").IsRequired(false).HasMaxLength(48);
            builder.Property(x => x.EntityTypeFullName).HasColumnName(@"EntityTypeFullName").HasColumnType("nvarchar(192)").IsRequired(false).HasMaxLength(192);
            builder.Property(x => x.TenantId).HasColumnName(@"TenantId").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.AbpEntityChangeSet).WithMany(b => b.AbpEntityChanges).HasForeignKey(c => c.EntityChangeSetId).HasConstraintName("FK_AbpEntityChanges_AbpEntityChangeSets_EntityChangeSetId");

            builder.HasIndex(x => x.EntityChangeSetId).HasDatabaseName("IX_AbpEntityChanges_EntityChangeSetId");
            builder.HasIndex(x => new { x.EntityTypeFullName, x.EntityId }).HasDatabaseName("IX_AbpEntityChanges_EntityTypeFullName_EntityId");
        }
    }

    // AbpEntityPropertyChanges
    public class AbpEntityPropertyChanxConfiguration : IEntityTypeConfiguration<AbpEntityPropertyChanx>
    {
        public void Configure(EntityTypeBuilder<AbpEntityPropertyChanx> builder)
        {
            builder.ToTable("AbpEntityPropertyChanges", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_AbpEntityPropertyChanges").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.EntityChangeId).HasColumnName(@"EntityChangeId").HasColumnType("bigint").IsRequired();
            builder.Property(x => x.NewValue).HasColumnName(@"NewValue").HasColumnType("nvarchar(512)").IsRequired(false).HasMaxLength(512);
            builder.Property(x => x.OriginalValue).HasColumnName(@"OriginalValue").HasColumnType("nvarchar(512)").IsRequired(false).HasMaxLength(512);
            builder.Property(x => x.PropertyName).HasColumnName(@"PropertyName").HasColumnType("nvarchar(96)").IsRequired(false).HasMaxLength(96);
            builder.Property(x => x.PropertyTypeFullName).HasColumnName(@"PropertyTypeFullName").HasColumnType("nvarchar(192)").IsRequired(false).HasMaxLength(192);
            builder.Property(x => x.TenantId).HasColumnName(@"TenantId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.NewValueHash).HasColumnName(@"NewValueHash").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.OriginalValueHash).HasColumnName(@"OriginalValueHash").HasColumnType("nvarchar(max)").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.AbpEntityChanx).WithMany(b => b.AbpEntityPropertyChanges).HasForeignKey(c => c.EntityChangeId).HasConstraintName("FK_AbpEntityPropertyChanges_AbpEntityChanges_EntityChangeId");

            builder.HasIndex(x => x.EntityChangeId).HasDatabaseName("IX_AbpEntityPropertyChanges_EntityChangeId");
        }
    }

    // AbpFeatures
    public class AbpFeatureConfiguration : IEntityTypeConfiguration<AbpFeature>
    {
        public void Configure(EntityTypeBuilder<AbpFeature> builder)
        {
            builder.ToTable("AbpFeatures", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_AbpFeatures").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CreationTime).HasColumnName(@"CreationTime").HasColumnType("datetime2").IsRequired();
            builder.Property(x => x.CreatorUserId).HasColumnName(@"CreatorUserId").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar(max)").IsRequired();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar(128)").IsRequired().HasMaxLength(128);
            builder.Property(x => x.Value).HasColumnName(@"Value").HasColumnType("nvarchar(2000)").IsRequired().HasMaxLength(2000);
            builder.Property(x => x.EditionId).HasColumnName(@"EditionId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TenantId).HasColumnName(@"TenantId").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.AbpEdition).WithMany(b => b.AbpFeatures).HasForeignKey(c => c.EditionId).HasConstraintName("FK_AbpFeatures_AbpEditions_EditionId");

            builder.HasIndex(x => new { x.EditionId, x.Name }).HasDatabaseName("IX_AbpFeatures_EditionId_Name");
            builder.HasIndex(x => new { x.TenantId, x.Name }).HasDatabaseName("IX_AbpFeatures_TenantId_Name");
        }
    }

    // AbpLanguages
    public class AbpLanguageConfiguration : IEntityTypeConfiguration<AbpLanguage>
    {
        public void Configure(EntityTypeBuilder<AbpLanguage> builder)
        {
            builder.ToTable("AbpLanguages", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_AbpLanguages").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CreationTime).HasColumnName(@"CreationTime").HasColumnType("datetime2").IsRequired();
            builder.Property(x => x.CreatorUserId).HasColumnName(@"CreatorUserId").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.DeleterUserId).HasColumnName(@"DeleterUserId").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.DeletionTime).HasColumnName(@"DeletionTime").HasColumnType("datetime2").IsRequired(false);
            builder.Property(x => x.DisplayName).HasColumnName(@"DisplayName").HasColumnType("nvarchar(64)").IsRequired().HasMaxLength(64);
            builder.Property(x => x.Icon).HasColumnName(@"Icon").HasColumnType("nvarchar(128)").IsRequired(false).HasMaxLength(128);
            builder.Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsRequired();
            builder.Property(x => x.LastModificationTime).HasColumnName(@"LastModificationTime").HasColumnType("datetime2").IsRequired(false);
            builder.Property(x => x.LastModifierUserId).HasColumnName(@"LastModifierUserId").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar(128)").IsRequired().HasMaxLength(128);
            builder.Property(x => x.TenantId).HasColumnName(@"TenantId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.IsDisabled).HasColumnName(@"IsDisabled").HasColumnType("bit").IsRequired();

            builder.HasIndex(x => new { x.TenantId, x.Name }).HasDatabaseName("IX_AbpLanguages_TenantId_Name");
        }
    }

    // AbpLanguageTexts
    public class AbpLanguageTextConfiguration : IEntityTypeConfiguration<AbpLanguageText>
    {
        public void Configure(EntityTypeBuilder<AbpLanguageText> builder)
        {
            builder.ToTable("AbpLanguageTexts", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_AbpLanguageTexts").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CreationTime).HasColumnName(@"CreationTime").HasColumnType("datetime2").IsRequired();
            builder.Property(x => x.CreatorUserId).HasColumnName(@"CreatorUserId").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.Key).HasColumnName(@"Key").HasColumnType("nvarchar(256)").IsRequired().HasMaxLength(256);
            builder.Property(x => x.LanguageName).HasColumnName(@"LanguageName").HasColumnType("nvarchar(128)").IsRequired().HasMaxLength(128);
            builder.Property(x => x.LastModificationTime).HasColumnName(@"LastModificationTime").HasColumnType("datetime2").IsRequired(false);
            builder.Property(x => x.LastModifierUserId).HasColumnName(@"LastModifierUserId").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.Source).HasColumnName(@"Source").HasColumnType("nvarchar(128)").IsRequired().HasMaxLength(128);
            builder.Property(x => x.TenantId).HasColumnName(@"TenantId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Value).HasColumnName(@"Value").HasColumnType("nvarchar(max)").IsRequired();

            builder.HasIndex(x => new { x.TenantId, x.Source, x.LanguageName, x.Key }).HasDatabaseName("IX_AbpLanguageTexts_TenantId_Source_LanguageName_Key");
        }
    }

    // AbpNotifications
    public class AbpNotificationConfiguration : IEntityTypeConfiguration<AbpNotification>
    {
        public void Configure(EntityTypeBuilder<AbpNotification> builder)
        {
            builder.ToTable("AbpNotifications", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_AbpNotifications").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CreationTime).HasColumnName(@"CreationTime").HasColumnType("datetime2").IsRequired();
            builder.Property(x => x.CreatorUserId).HasColumnName(@"CreatorUserId").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.Data).HasColumnName(@"Data").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.DataTypeName).HasColumnName(@"DataTypeName").HasColumnType("nvarchar(512)").IsRequired(false).HasMaxLength(512);
            builder.Property(x => x.EntityId).HasColumnName(@"EntityId").HasColumnType("nvarchar(96)").IsRequired(false).HasMaxLength(96);
            builder.Property(x => x.EntityTypeAssemblyQualifiedName).HasColumnName(@"EntityTypeAssemblyQualifiedName").HasColumnType("nvarchar(512)").IsRequired(false).HasMaxLength(512);
            builder.Property(x => x.EntityTypeName).HasColumnName(@"EntityTypeName").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.ExcludedUserIds).HasColumnName(@"ExcludedUserIds").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.NotificationName).HasColumnName(@"NotificationName").HasColumnType("nvarchar(96)").IsRequired().HasMaxLength(96);
            builder.Property(x => x.Severity).HasColumnName(@"Severity").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.TenantIds).HasColumnName(@"TenantIds").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.UserIds).HasColumnName(@"UserIds").HasColumnType("nvarchar(max)").IsRequired(false);
        }
    }

    // AbpNotificationSubscriptions
    public class AbpNotificationSubscriptionConfiguration : IEntityTypeConfiguration<AbpNotificationSubscription>
    {
        public void Configure(EntityTypeBuilder<AbpNotificationSubscription> builder)
        {
            builder.ToTable("AbpNotificationSubscriptions", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_AbpNotificationSubscriptions").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CreationTime).HasColumnName(@"CreationTime").HasColumnType("datetime2").IsRequired();
            builder.Property(x => x.CreatorUserId).HasColumnName(@"CreatorUserId").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.EntityId).HasColumnName(@"EntityId").HasColumnType("nvarchar(96)").IsRequired(false).HasMaxLength(96);
            builder.Property(x => x.EntityTypeAssemblyQualifiedName).HasColumnName(@"EntityTypeAssemblyQualifiedName").HasColumnType("nvarchar(512)").IsRequired(false).HasMaxLength(512);
            builder.Property(x => x.EntityTypeName).HasColumnName(@"EntityTypeName").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.NotificationName).HasColumnName(@"NotificationName").HasColumnType("nvarchar(96)").IsRequired(false).HasMaxLength(96);
            builder.Property(x => x.TenantId).HasColumnName(@"TenantId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("bigint").IsRequired();

            builder.HasIndex(x => new { x.NotificationName, x.EntityTypeName, x.EntityId, x.UserId }).HasDatabaseName("IX_AbpNotificationSubscriptions_NotificationName_EntityTypeName_EntityId_UserId");
            builder.HasIndex(x => new { x.TenantId, x.NotificationName, x.EntityTypeName, x.EntityId, x.UserId }).HasDatabaseName("IX_AbpNotificationSubscriptions_TenantId_NotificationName_EntityTypeName_EntityId_UserId");
        }
    }

    // AbpOrganizationUnits
    public class AbpOrganizationUnitConfiguration : IEntityTypeConfiguration<AbpOrganizationUnit>
    {
        public void Configure(EntityTypeBuilder<AbpOrganizationUnit> builder)
        {
            builder.ToTable("AbpOrganizationUnits", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_AbpOrganizationUnits").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Code).HasColumnName(@"Code").HasColumnType("nvarchar(95)").IsRequired().HasMaxLength(95);
            builder.Property(x => x.CreationTime).HasColumnName(@"CreationTime").HasColumnType("datetime2").IsRequired();
            builder.Property(x => x.CreatorUserId).HasColumnName(@"CreatorUserId").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.DeleterUserId).HasColumnName(@"DeleterUserId").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.DeletionTime).HasColumnName(@"DeletionTime").HasColumnType("datetime2").IsRequired(false);
            builder.Property(x => x.DisplayName).HasColumnName(@"DisplayName").HasColumnType("nvarchar(128)").IsRequired().HasMaxLength(128);
            builder.Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsRequired();
            builder.Property(x => x.LastModificationTime).HasColumnName(@"LastModificationTime").HasColumnType("datetime2").IsRequired(false);
            builder.Property(x => x.LastModifierUserId).HasColumnName(@"LastModifierUserId").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.ParentId).HasColumnName(@"ParentId").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.TenantId).HasColumnName(@"TenantId").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Parent).WithMany(b => b.AbpOrganizationUnits).HasForeignKey(c => c.ParentId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_AbpOrganizationUnits_AbpOrganizationUnits_ParentId");

            builder.HasIndex(x => x.ParentId).HasDatabaseName("IX_AbpOrganizationUnits_ParentId");
            builder.HasIndex(x => new { x.TenantId, x.Code }).HasDatabaseName("IX_AbpOrganizationUnits_TenantId_Code");
        }
    }

    // AbpOrganizationUnitRoles
    public class AbpOrganizationUnitRoleConfiguration : IEntityTypeConfiguration<AbpOrganizationUnitRole>
    {
        public void Configure(EntityTypeBuilder<AbpOrganizationUnitRole> builder)
        {
            builder.ToTable("AbpOrganizationUnitRoles", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_AbpOrganizationUnitRoles").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CreationTime).HasColumnName(@"CreationTime").HasColumnType("datetime2").IsRequired();
            builder.Property(x => x.CreatorUserId).HasColumnName(@"CreatorUserId").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.TenantId).HasColumnName(@"TenantId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.RoleId).HasColumnName(@"RoleId").HasColumnType("int").IsRequired();
            builder.Property(x => x.OrganizationUnitId).HasColumnName(@"OrganizationUnitId").HasColumnType("bigint").IsRequired();
            builder.Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsRequired();

            builder.HasIndex(x => new { x.TenantId, x.OrganizationUnitId }).HasDatabaseName("IX_AbpOrganizationUnitRoles_TenantId_OrganizationUnitId");
            builder.HasIndex(x => new { x.TenantId, x.RoleId }).HasDatabaseName("IX_AbpOrganizationUnitRoles_TenantId_RoleId");
        }
    }

    // AbpPermissions
    public class AbpPermissionConfiguration : IEntityTypeConfiguration<AbpPermission>
    {
        public void Configure(EntityTypeBuilder<AbpPermission> builder)
        {
            builder.ToTable("AbpPermissions", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_AbpPermissions").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CreationTime).HasColumnName(@"CreationTime").HasColumnType("datetime2").IsRequired();
            builder.Property(x => x.CreatorUserId).HasColumnName(@"CreatorUserId").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar(max)").IsRequired();
            builder.Property(x => x.IsGranted).HasColumnName(@"IsGranted").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar(128)").IsRequired().HasMaxLength(128);
            builder.Property(x => x.TenantId).HasColumnName(@"TenantId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.RoleId).HasColumnName(@"RoleId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("bigint").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.AbpRole).WithMany(b => b.AbpPermissions).HasForeignKey(c => c.RoleId).HasConstraintName("FK_AbpPermissions_AbpRoles_RoleId");
            builder.HasOne(a => a.AbpUser).WithMany(b => b.AbpPermissions).HasForeignKey(c => c.UserId).HasConstraintName("FK_AbpPermissions_AbpUsers_UserId");

            builder.HasIndex(x => x.RoleId).HasDatabaseName("IX_AbpPermissions_RoleId");
            builder.HasIndex(x => new { x.TenantId, x.Name }).HasDatabaseName("IX_AbpPermissions_TenantId_Name");
            builder.HasIndex(x => x.UserId).HasDatabaseName("IX_AbpPermissions_UserId");
        }
    }

    // AbpRoles
    public class AbpRoleConfiguration : IEntityTypeConfiguration<AbpRole>
    {
        public void Configure(EntityTypeBuilder<AbpRole> builder)
        {
            builder.ToTable("AbpRoles", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_AbpRoles").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.ConcurrencyStamp).HasColumnName(@"ConcurrencyStamp").HasColumnType("nvarchar(128)").IsRequired(false).HasMaxLength(128);
            builder.Property(x => x.CreationTime).HasColumnName(@"CreationTime").HasColumnType("datetime2").IsRequired();
            builder.Property(x => x.CreatorUserId).HasColumnName(@"CreatorUserId").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.DeleterUserId).HasColumnName(@"DeleterUserId").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.DeletionTime).HasColumnName(@"DeletionTime").HasColumnType("datetime2").IsRequired(false);
            builder.Property(x => x.DisplayName).HasColumnName(@"DisplayName").HasColumnType("nvarchar(64)").IsRequired().HasMaxLength(64);
            builder.Property(x => x.IsDefault).HasColumnName(@"IsDefault").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsStatic).HasColumnName(@"IsStatic").HasColumnType("bit").IsRequired();
            builder.Property(x => x.LastModificationTime).HasColumnName(@"LastModificationTime").HasColumnType("datetime2").IsRequired(false);
            builder.Property(x => x.LastModifierUserId).HasColumnName(@"LastModifierUserId").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar(32)").IsRequired().HasMaxLength(32);
            builder.Property(x => x.NormalizedName).HasColumnName(@"NormalizedName").HasColumnType("nvarchar(32)").IsRequired().HasMaxLength(32);
            builder.Property(x => x.TenantId).HasColumnName(@"TenantId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(max)").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.CreatorUser).WithMany(b => b.AbpRoles_CreatorUserId).HasForeignKey(c => c.CreatorUserId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_AbpRoles_AbpUsers_CreatorUserId");
            builder.HasOne(a => a.DeleterUser).WithMany(b => b.AbpRoles_DeleterUserId).HasForeignKey(c => c.DeleterUserId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_AbpRoles_AbpUsers_DeleterUserId");
            builder.HasOne(a => a.LastModifierUser).WithMany(b => b.AbpRoles_LastModifierUserId).HasForeignKey(c => c.LastModifierUserId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_AbpRoles_AbpUsers_LastModifierUserId");

            builder.HasIndex(x => x.CreatorUserId).HasDatabaseName("IX_AbpRoles_CreatorUserId");
            builder.HasIndex(x => x.DeleterUserId).HasDatabaseName("IX_AbpRoles_DeleterUserId");
            builder.HasIndex(x => x.LastModifierUserId).HasDatabaseName("IX_AbpRoles_LastModifierUserId");
            builder.HasIndex(x => new { x.TenantId, x.NormalizedName }).HasDatabaseName("IX_AbpRoles_TenantId_NormalizedName");
        }
    }

    // AbpRoleClaims
    public class AbpRoleClaimConfiguration : IEntityTypeConfiguration<AbpRoleClaim>
    {
        public void Configure(EntityTypeBuilder<AbpRoleClaim> builder)
        {
            builder.ToTable("AbpRoleClaims", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_AbpRoleClaims").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.ClaimType).HasColumnName(@"ClaimType").HasColumnType("nvarchar(256)").IsRequired(false).HasMaxLength(256);
            builder.Property(x => x.ClaimValue).HasColumnName(@"ClaimValue").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.CreationTime).HasColumnName(@"CreationTime").HasColumnType("datetime2").IsRequired();
            builder.Property(x => x.CreatorUserId).HasColumnName(@"CreatorUserId").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.RoleId).HasColumnName(@"RoleId").HasColumnType("int").IsRequired();
            builder.Property(x => x.TenantId).HasColumnName(@"TenantId").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.AbpRole).WithMany(b => b.AbpRoleClaims).HasForeignKey(c => c.RoleId).HasConstraintName("FK_AbpRoleClaims_AbpRoles_RoleId");

            builder.HasIndex(x => x.RoleId).HasDatabaseName("IX_AbpRoleClaims_RoleId");
            builder.HasIndex(x => new { x.TenantId, x.ClaimType }).HasDatabaseName("IX_AbpRoleClaims_TenantId_ClaimType");
        }
    }

    // AbpSettings
    public class AbpSettingConfiguration : IEntityTypeConfiguration<AbpSetting>
    {
        public void Configure(EntityTypeBuilder<AbpSetting> builder)
        {
            builder.ToTable("AbpSettings", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_AbpSettings").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CreationTime).HasColumnName(@"CreationTime").HasColumnType("datetime2").IsRequired();
            builder.Property(x => x.CreatorUserId).HasColumnName(@"CreatorUserId").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.LastModificationTime).HasColumnName(@"LastModificationTime").HasColumnType("datetime2").IsRequired(false);
            builder.Property(x => x.LastModifierUserId).HasColumnName(@"LastModifierUserId").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar(256)").IsRequired().HasMaxLength(256);
            builder.Property(x => x.TenantId).HasColumnName(@"TenantId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.Value).HasColumnName(@"Value").HasColumnType("nvarchar(max)").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.AbpUser).WithMany(b => b.AbpSettings).HasForeignKey(c => c.UserId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_AbpSettings_AbpUsers_UserId");

            builder.HasIndex(x => new { x.TenantId, x.Name, x.UserId }).HasDatabaseName("IX_AbpSettings_TenantId_Name_UserId").IsUnique();
            builder.HasIndex(x => x.UserId).HasDatabaseName("IX_AbpSettings_UserId");
        }
    }

    // AbpTenants
    public class AbpTenantConfiguration : IEntityTypeConfiguration<AbpTenant>
    {
        public void Configure(EntityTypeBuilder<AbpTenant> builder)
        {
            builder.ToTable("AbpTenants", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_AbpTenants").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.ConnectionString).HasColumnName(@"ConnectionString").HasColumnType("nvarchar(1024)").IsRequired(false).HasMaxLength(1024);
            builder.Property(x => x.CreationTime).HasColumnName(@"CreationTime").HasColumnType("datetime2").IsRequired();
            builder.Property(x => x.CreatorUserId).HasColumnName(@"CreatorUserId").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.DeleterUserId).HasColumnName(@"DeleterUserId").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.DeletionTime).HasColumnName(@"DeletionTime").HasColumnType("datetime2").IsRequired(false);
            builder.Property(x => x.EditionId).HasColumnName(@"EditionId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsRequired();
            builder.Property(x => x.LastModificationTime).HasColumnName(@"LastModificationTime").HasColumnType("datetime2").IsRequired(false);
            builder.Property(x => x.LastModifierUserId).HasColumnName(@"LastModifierUserId").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar(128)").IsRequired().HasMaxLength(128);
            builder.Property(x => x.TenancyName).HasColumnName(@"TenancyName").HasColumnType("nvarchar(64)").IsRequired().HasMaxLength(64);

            // Foreign keys
            builder.HasOne(a => a.AbpEdition).WithMany(b => b.AbpTenants).HasForeignKey(c => c.EditionId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_AbpTenants_AbpEditions_EditionId");
            builder.HasOne(a => a.CreatorUser).WithMany(b => b.AbpTenants_CreatorUserId).HasForeignKey(c => c.CreatorUserId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_AbpTenants_AbpUsers_CreatorUserId");
            builder.HasOne(a => a.DeleterUser).WithMany(b => b.AbpTenants_DeleterUserId).HasForeignKey(c => c.DeleterUserId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_AbpTenants_AbpUsers_DeleterUserId");
            builder.HasOne(a => a.LastModifierUser).WithMany(b => b.AbpTenants_LastModifierUserId).HasForeignKey(c => c.LastModifierUserId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_AbpTenants_AbpUsers_LastModifierUserId");

            builder.HasIndex(x => x.CreatorUserId).HasDatabaseName("IX_AbpTenants_CreatorUserId");
            builder.HasIndex(x => x.DeleterUserId).HasDatabaseName("IX_AbpTenants_DeleterUserId");
            builder.HasIndex(x => x.EditionId).HasDatabaseName("IX_AbpTenants_EditionId");
            builder.HasIndex(x => x.LastModifierUserId).HasDatabaseName("IX_AbpTenants_LastModifierUserId");
            builder.HasIndex(x => x.TenancyName).HasDatabaseName("IX_AbpTenants_TenancyName");
        }
    }

    // AbpTenantNotifications
    public class AbpTenantNotificationConfiguration : IEntityTypeConfiguration<AbpTenantNotification>
    {
        public void Configure(EntityTypeBuilder<AbpTenantNotification> builder)
        {
            builder.ToTable("AbpTenantNotifications", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_AbpTenantNotifications").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CreationTime).HasColumnName(@"CreationTime").HasColumnType("datetime2").IsRequired();
            builder.Property(x => x.CreatorUserId).HasColumnName(@"CreatorUserId").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.Data).HasColumnName(@"Data").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.DataTypeName).HasColumnName(@"DataTypeName").HasColumnType("nvarchar(512)").IsRequired(false).HasMaxLength(512);
            builder.Property(x => x.EntityId).HasColumnName(@"EntityId").HasColumnType("nvarchar(96)").IsRequired(false).HasMaxLength(96);
            builder.Property(x => x.EntityTypeAssemblyQualifiedName).HasColumnName(@"EntityTypeAssemblyQualifiedName").HasColumnType("nvarchar(512)").IsRequired(false).HasMaxLength(512);
            builder.Property(x => x.EntityTypeName).HasColumnName(@"EntityTypeName").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.NotificationName).HasColumnName(@"NotificationName").HasColumnType("nvarchar(96)").IsRequired().HasMaxLength(96);
            builder.Property(x => x.Severity).HasColumnName(@"Severity").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.TenantId).HasColumnName(@"TenantId").HasColumnType("int").IsRequired(false);

            builder.HasIndex(x => x.TenantId).HasDatabaseName("IX_AbpTenantNotifications_TenantId");
        }
    }

    // AbpUsers
    public class AbpUserConfiguration : IEntityTypeConfiguration<AbpUser>
    {
        public void Configure(EntityTypeBuilder<AbpUser> builder)
        {
            builder.ToTable("AbpUsers", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_AbpUsers").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.AccessFailedCount).HasColumnName(@"AccessFailedCount").HasColumnType("int").IsRequired();
            builder.Property(x => x.AuthenticationSource).HasColumnName(@"AuthenticationSource").HasColumnType("nvarchar(64)").IsRequired(false).HasMaxLength(64);
            builder.Property(x => x.ConcurrencyStamp).HasColumnName(@"ConcurrencyStamp").HasColumnType("nvarchar(128)").IsRequired(false).HasMaxLength(128);
            builder.Property(x => x.CreationTime).HasColumnName(@"CreationTime").HasColumnType("datetime2").IsRequired();
            builder.Property(x => x.CreatorUserId).HasColumnName(@"CreatorUserId").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.DeleterUserId).HasColumnName(@"DeleterUserId").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.DeletionTime).HasColumnName(@"DeletionTime").HasColumnType("datetime2").IsRequired(false);
            builder.Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType("nvarchar(256)").IsRequired().HasMaxLength(256);
            builder.Property(x => x.EmailConfirmationCode).HasColumnName(@"EmailConfirmationCode").HasColumnType("nvarchar(328)").IsRequired(false).HasMaxLength(328);
            builder.Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsEmailConfirmed).HasColumnName(@"IsEmailConfirmed").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsLockoutEnabled).HasColumnName(@"IsLockoutEnabled").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsPhoneNumberConfirmed).HasColumnName(@"IsPhoneNumberConfirmed").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsTwoFactorEnabled).HasColumnName(@"IsTwoFactorEnabled").HasColumnType("bit").IsRequired();
            builder.Property(x => x.LastModificationTime).HasColumnName(@"LastModificationTime").HasColumnType("datetime2").IsRequired(false);
            builder.Property(x => x.LastModifierUserId).HasColumnName(@"LastModifierUserId").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.LockoutEndDateUtc).HasColumnName(@"LockoutEndDateUtc").HasColumnType("datetime2").IsRequired(false);
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar(64)").IsRequired().HasMaxLength(64);
            builder.Property(x => x.NormalizedEmailAddress).HasColumnName(@"NormalizedEmailAddress").HasColumnType("nvarchar(256)").IsRequired().HasMaxLength(256);
            builder.Property(x => x.NormalizedUserName).HasColumnName(@"NormalizedUserName").HasColumnType("nvarchar(256)").IsRequired().HasMaxLength(256);
            builder.Property(x => x.Password).HasColumnName(@"Password").HasColumnType("nvarchar(128)").IsRequired().HasMaxLength(128);
            builder.Property(x => x.PasswordResetCode).HasColumnName(@"PasswordResetCode").HasColumnType("nvarchar(328)").IsRequired(false).HasMaxLength(328);
            builder.Property(x => x.PhoneNumber).HasColumnName(@"PhoneNumber").HasColumnType("nvarchar(32)").IsRequired(false).HasMaxLength(32);
            builder.Property(x => x.SecurityStamp).HasColumnName(@"SecurityStamp").HasColumnType("nvarchar(128)").IsRequired(false).HasMaxLength(128);
            builder.Property(x => x.Surname).HasColumnName(@"Surname").HasColumnType("nvarchar(64)").IsRequired().HasMaxLength(64);
            builder.Property(x => x.TenantId).HasColumnName(@"TenantId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("nvarchar(256)").IsRequired().HasMaxLength(256);

            // Foreign keys
            builder.HasOne(a => a.AbpUser_DeleterUserId).WithMany(b => b.AbpUsers_DeleterUserId).HasForeignKey(c => c.DeleterUserId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_AbpUsers_AbpUsers_DeleterUserId");
            builder.HasOne(a => a.AbpUser_LastModifierUserId).WithMany(b => b.AbpUsers_LastModifierUserId).HasForeignKey(c => c.LastModifierUserId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_AbpUsers_AbpUsers_LastModifierUserId");
            builder.HasOne(a => a.CreatorUser).WithMany(b => b.AbpUsers_CreatorUserId).HasForeignKey(c => c.CreatorUserId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_AbpUsers_AbpUsers_CreatorUserId");

            builder.HasIndex(x => x.CreatorUserId).HasDatabaseName("IX_AbpUsers_CreatorUserId");
            builder.HasIndex(x => x.DeleterUserId).HasDatabaseName("IX_AbpUsers_DeleterUserId");
            builder.HasIndex(x => x.LastModifierUserId).HasDatabaseName("IX_AbpUsers_LastModifierUserId");
            builder.HasIndex(x => new { x.TenantId, x.NormalizedEmailAddress }).HasDatabaseName("IX_AbpUsers_TenantId_NormalizedEmailAddress");
            builder.HasIndex(x => new { x.TenantId, x.NormalizedUserName }).HasDatabaseName("IX_AbpUsers_TenantId_NormalizedUserName");
        }
    }

    // AbpUserAccounts
    public class AbpUserAccountConfiguration : IEntityTypeConfiguration<AbpUserAccount>
    {
        public void Configure(EntityTypeBuilder<AbpUserAccount> builder)
        {
            builder.ToTable("AbpUserAccounts", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_AbpUserAccounts").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CreationTime).HasColumnName(@"CreationTime").HasColumnType("datetime2").IsRequired();
            builder.Property(x => x.CreatorUserId).HasColumnName(@"CreatorUserId").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.DeleterUserId).HasColumnName(@"DeleterUserId").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.DeletionTime).HasColumnName(@"DeletionTime").HasColumnType("datetime2").IsRequired(false);
            builder.Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType("nvarchar(256)").IsRequired(false).HasMaxLength(256);
            builder.Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsRequired();
            builder.Property(x => x.LastModificationTime).HasColumnName(@"LastModificationTime").HasColumnType("datetime2").IsRequired(false);
            builder.Property(x => x.LastModifierUserId).HasColumnName(@"LastModifierUserId").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.TenantId).HasColumnName(@"TenantId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("bigint").IsRequired();
            builder.Property(x => x.UserLinkId).HasColumnName(@"UserLinkId").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("nvarchar(256)").IsRequired(false).HasMaxLength(256);

            builder.HasIndex(x => x.EmailAddress).HasDatabaseName("IX_AbpUserAccounts_EmailAddress");
            builder.HasIndex(x => new { x.TenantId, x.EmailAddress }).HasDatabaseName("IX_AbpUserAccounts_TenantId_EmailAddress");
            builder.HasIndex(x => new { x.TenantId, x.UserId }).HasDatabaseName("IX_AbpUserAccounts_TenantId_UserId");
            builder.HasIndex(x => new { x.TenantId, x.UserName }).HasDatabaseName("IX_AbpUserAccounts_TenantId_UserName");
            builder.HasIndex(x => x.UserName).HasDatabaseName("IX_AbpUserAccounts_UserName");
        }
    }

    // AbpUserClaims
    public class AbpUserClaimConfiguration : IEntityTypeConfiguration<AbpUserClaim>
    {
        public void Configure(EntityTypeBuilder<AbpUserClaim> builder)
        {
            builder.ToTable("AbpUserClaims", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_AbpUserClaims").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.ClaimType).HasColumnName(@"ClaimType").HasColumnType("nvarchar(256)").IsRequired(false).HasMaxLength(256);
            builder.Property(x => x.ClaimValue).HasColumnName(@"ClaimValue").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.CreationTime).HasColumnName(@"CreationTime").HasColumnType("datetime2").IsRequired();
            builder.Property(x => x.CreatorUserId).HasColumnName(@"CreatorUserId").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.TenantId).HasColumnName(@"TenantId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("bigint").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.AbpUser).WithMany(b => b.AbpUserClaims).HasForeignKey(c => c.UserId).HasConstraintName("FK_AbpUserClaims_AbpUsers_UserId");

            builder.HasIndex(x => new { x.TenantId, x.ClaimType }).HasDatabaseName("IX_AbpUserClaims_TenantId_ClaimType");
            builder.HasIndex(x => x.UserId).HasDatabaseName("IX_AbpUserClaims_UserId");
        }
    }

    // AbpUserLogins
    public class AbpUserLoginConfiguration : IEntityTypeConfiguration<AbpUserLogin>
    {
        public void Configure(EntityTypeBuilder<AbpUserLogin> builder)
        {
            builder.ToTable("AbpUserLogins", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_AbpUserLogins").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.LoginProvider).HasColumnName(@"LoginProvider").HasColumnType("nvarchar(128)").IsRequired().HasMaxLength(128);
            builder.Property(x => x.ProviderKey).HasColumnName(@"ProviderKey").HasColumnType("nvarchar(256)").IsRequired().HasMaxLength(256);
            builder.Property(x => x.TenantId).HasColumnName(@"TenantId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("bigint").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.AbpUser).WithMany(b => b.AbpUserLogins).HasForeignKey(c => c.UserId).HasConstraintName("FK_AbpUserLogins_AbpUsers_UserId");

            builder.HasIndex(x => new { x.TenantId, x.LoginProvider, x.ProviderKey }).HasDatabaseName("IX_AbpUserLogins_TenantId_LoginProvider_ProviderKey");
            builder.HasIndex(x => new { x.TenantId, x.UserId }).HasDatabaseName("IX_AbpUserLogins_TenantId_UserId");
            builder.HasIndex(x => x.UserId).HasDatabaseName("IX_AbpUserLogins_UserId");
        }
    }

    // AbpUserLoginAttempts
    public class AbpUserLoginAttemptConfiguration : IEntityTypeConfiguration<AbpUserLoginAttempt>
    {
        public void Configure(EntityTypeBuilder<AbpUserLoginAttempt> builder)
        {
            builder.ToTable("AbpUserLoginAttempts", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_AbpUserLoginAttempts").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.BrowserInfo).HasColumnName(@"BrowserInfo").HasColumnType("nvarchar(512)").IsRequired(false).HasMaxLength(512);
            builder.Property(x => x.ClientIpAddress).HasColumnName(@"ClientIpAddress").HasColumnType("nvarchar(64)").IsRequired(false).HasMaxLength(64);
            builder.Property(x => x.ClientName).HasColumnName(@"ClientName").HasColumnType("nvarchar(128)").IsRequired(false).HasMaxLength(128);
            builder.Property(x => x.CreationTime).HasColumnName(@"CreationTime").HasColumnType("datetime2").IsRequired();
            builder.Property(x => x.Result).HasColumnName(@"Result").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.TenancyName).HasColumnName(@"TenancyName").HasColumnType("nvarchar(64)").IsRequired(false).HasMaxLength(64);
            builder.Property(x => x.TenantId).HasColumnName(@"TenantId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.UserNameOrEmailAddress).HasColumnName(@"UserNameOrEmailAddress").HasColumnType("nvarchar(256)").IsRequired(false).HasMaxLength(256);

            builder.HasIndex(x => new { x.TenancyName, x.UserNameOrEmailAddress, x.Result }).HasDatabaseName("IX_AbpUserLoginAttempts_TenancyName_UserNameOrEmailAddress_Result");
            builder.HasIndex(x => new { x.UserId, x.TenantId }).HasDatabaseName("IX_AbpUserLoginAttempts_UserId_TenantId");
        }
    }

    // AbpUserNotifications
    public class AbpUserNotificationConfiguration : IEntityTypeConfiguration<AbpUserNotification>
    {
        public void Configure(EntityTypeBuilder<AbpUserNotification> builder)
        {
            builder.ToTable("AbpUserNotifications", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_AbpUserNotifications").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CreationTime).HasColumnName(@"CreationTime").HasColumnType("datetime2").IsRequired();
            builder.Property(x => x.State).HasColumnName(@"State").HasColumnType("int").IsRequired();
            builder.Property(x => x.TenantId).HasColumnName(@"TenantId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TenantNotificationId).HasColumnName(@"TenantNotificationId").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("bigint").IsRequired();

            builder.HasIndex(x => new { x.UserId, x.State, x.CreationTime }).HasDatabaseName("IX_AbpUserNotifications_UserId_State_CreationTime");
        }
    }

    // AbpUserOrganizationUnits
    public class AbpUserOrganizationUnitConfiguration : IEntityTypeConfiguration<AbpUserOrganizationUnit>
    {
        public void Configure(EntityTypeBuilder<AbpUserOrganizationUnit> builder)
        {
            builder.ToTable("AbpUserOrganizationUnits", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_AbpUserOrganizationUnits").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CreationTime).HasColumnName(@"CreationTime").HasColumnType("datetime2").IsRequired();
            builder.Property(x => x.CreatorUserId).HasColumnName(@"CreatorUserId").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.OrganizationUnitId).HasColumnName(@"OrganizationUnitId").HasColumnType("bigint").IsRequired();
            builder.Property(x => x.TenantId).HasColumnName(@"TenantId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("bigint").IsRequired();
            builder.Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsRequired();

            builder.HasIndex(x => new { x.TenantId, x.OrganizationUnitId }).HasDatabaseName("IX_AbpUserOrganizationUnits_TenantId_OrganizationUnitId");
            builder.HasIndex(x => new { x.TenantId, x.UserId }).HasDatabaseName("IX_AbpUserOrganizationUnits_TenantId_UserId");
        }
    }

    // AbpUserRoles
    public class AbpUserRoleConfiguration : IEntityTypeConfiguration<AbpUserRole>
    {
        public void Configure(EntityTypeBuilder<AbpUserRole> builder)
        {
            builder.ToTable("AbpUserRoles", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_AbpUserRoles").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CreationTime).HasColumnName(@"CreationTime").HasColumnType("datetime2").IsRequired();
            builder.Property(x => x.CreatorUserId).HasColumnName(@"CreatorUserId").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.RoleId).HasColumnName(@"RoleId").HasColumnType("int").IsRequired();
            builder.Property(x => x.TenantId).HasColumnName(@"TenantId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("bigint").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.AbpUser).WithMany(b => b.AbpUserRoles).HasForeignKey(c => c.UserId).HasConstraintName("FK_AbpUserRoles_AbpUsers_UserId");

            builder.HasIndex(x => new { x.TenantId, x.RoleId }).HasDatabaseName("IX_AbpUserRoles_TenantId_RoleId");
            builder.HasIndex(x => new { x.TenantId, x.UserId }).HasDatabaseName("IX_AbpUserRoles_TenantId_UserId");
            builder.HasIndex(x => x.UserId).HasDatabaseName("IX_AbpUserRoles_UserId");
        }
    }

    // AbpUserTokens
    public class AbpUserTokenConfiguration : IEntityTypeConfiguration<AbpUserToken>
    {
        public void Configure(EntityTypeBuilder<AbpUserToken> builder)
        {
            builder.ToTable("AbpUserTokens", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_AbpUserTokens").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.LoginProvider).HasColumnName(@"LoginProvider").HasColumnType("nvarchar(128)").IsRequired(false).HasMaxLength(128);
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar(128)").IsRequired(false).HasMaxLength(128);
            builder.Property(x => x.TenantId).HasColumnName(@"TenantId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("bigint").IsRequired();
            builder.Property(x => x.Value).HasColumnName(@"Value").HasColumnType("nvarchar(512)").IsRequired(false).HasMaxLength(512);
            builder.Property(x => x.ExpireDate).HasColumnName(@"ExpireDate").HasColumnType("datetime2").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.AbpUser).WithMany(b => b.AbpUserTokens).HasForeignKey(c => c.UserId).HasConstraintName("FK_AbpUserTokens_AbpUsers_UserId");

            builder.HasIndex(x => new { x.TenantId, x.UserId }).HasDatabaseName("IX_AbpUserTokens_TenantId_UserId");
            builder.HasIndex(x => x.UserId).HasDatabaseName("IX_AbpUserTokens_UserId");
        }
    }

    // AbpWebhookEvents
    public class AbpWebhookEventConfiguration : IEntityTypeConfiguration<AbpWebhookEvent>
    {
        public void Configure(EntityTypeBuilder<AbpWebhookEvent> builder)
        {
            builder.ToTable("AbpWebhookEvents", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_AbpWebhookEvents").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.WebhookName).HasColumnName(@"WebhookName").HasColumnType("nvarchar(max)").IsRequired();
            builder.Property(x => x.Data).HasColumnName(@"Data").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.CreationTime).HasColumnName(@"CreationTime").HasColumnType("datetime2").IsRequired();
            builder.Property(x => x.TenantId).HasColumnName(@"TenantId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsRequired();
            builder.Property(x => x.DeletionTime).HasColumnName(@"DeletionTime").HasColumnType("datetime2").IsRequired(false);
        }
    }

    // AbpWebhookSendAttempts
    public class AbpWebhookSendAttemptConfiguration : IEntityTypeConfiguration<AbpWebhookSendAttempt>
    {
        public void Configure(EntityTypeBuilder<AbpWebhookSendAttempt> builder)
        {
            builder.ToTable("AbpWebhookSendAttempts", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_AbpWebhookSendAttempts").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.WebhookEventId).HasColumnName(@"WebhookEventId").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.WebhookSubscriptionId).HasColumnName(@"WebhookSubscriptionId").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.Response).HasColumnName(@"Response").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.ResponseStatusCode).HasColumnName(@"ResponseStatusCode").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CreationTime).HasColumnName(@"CreationTime").HasColumnType("datetime2").IsRequired();
            builder.Property(x => x.LastModificationTime).HasColumnName(@"LastModificationTime").HasColumnType("datetime2").IsRequired(false);
            builder.Property(x => x.TenantId).HasColumnName(@"TenantId").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.AbpWebhookEvent).WithMany(b => b.AbpWebhookSendAttempts).HasForeignKey(c => c.WebhookEventId).HasConstraintName("FK_AbpWebhookSendAttempts_AbpWebhookEvents_WebhookEventId");

            builder.HasIndex(x => x.WebhookEventId).HasDatabaseName("IX_AbpWebhookSendAttempts_WebhookEventId");
        }
    }

    // AbpWebhookSubscriptions
    public class AbpWebhookSubscriptionConfiguration : IEntityTypeConfiguration<AbpWebhookSubscription>
    {
        public void Configure(EntityTypeBuilder<AbpWebhookSubscription> builder)
        {
            builder.ToTable("AbpWebhookSubscriptions", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_AbpWebhookSubscriptions").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CreationTime).HasColumnName(@"CreationTime").HasColumnType("datetime2").IsRequired();
            builder.Property(x => x.CreatorUserId).HasColumnName(@"CreatorUserId").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.TenantId).HasColumnName(@"TenantId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.WebhookUri).HasColumnName(@"WebhookUri").HasColumnType("nvarchar(max)").IsRequired();
            builder.Property(x => x.Secret).HasColumnName(@"Secret").HasColumnType("nvarchar(max)").IsRequired();
            builder.Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Webhooks).HasColumnName(@"Webhooks").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.Headers).HasColumnName(@"Headers").HasColumnType("nvarchar(max)").IsRequired(false);
        }
    }

    // BlackListUser
    public class BlackListUserConfiguration : IEntityTypeConfiguration<BlackListUser>
    {
        public void Configure(EntityTypeBuilder<BlackListUser> builder)
        {
            builder.ToTable("BlackListUser", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_EmailBlackList").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.MaNhanVien).HasColumnName(@"MaNhanVien").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Username).HasColumnName(@"Username").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nvarchar(256)").IsRequired(false).HasMaxLength(256);
            builder.Property(x => x.MoTa).HasColumnName(@"MoTa").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
        }
    }

    // CreateDisableUserManuals
    public class CreateDisableUserManualConfiguration : IEntityTypeConfiguration<CreateDisableUserManual>
    {
        public void Configure(EntityTypeBuilder<CreateDisableUserManual> builder)
        {
            builder.ToTable("CreateDisableUserManuals", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_HplCreateUserManual").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.ListMaNhanVien).HasColumnName(@"ListMaNhanVien").HasColumnType("nvarchar(max)").IsRequired();
            builder.Property(x => x.ActionType).HasColumnName(@"ActionType").HasColumnType("int").IsRequired();
            builder.Property(x => x.DateCreated).HasColumnName(@"DateCreated").HasColumnType("datetime").IsRequired();
        }
    }

    // Customers
    public class CustomerConfiguration : IEntityTypeConfiguration<Customer>
    {
        public void Configure(EntityTypeBuilder<Customer> builder)
        {
            builder.ToTable("Customers", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__Customer__EB5B581E83D6C22E").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.LastName).HasColumnName(@"LastName").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.Contact).HasColumnName(@"Contact").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.Email).HasColumnName(@"Email").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
        }
    }

    // HplCreateUserLogs
    public class HplCreateUserLogConfiguration : IEntityTypeConfiguration<HplCreateUserLog>
    {
        public void Configure(EntityTypeBuilder<HplCreateUserLog> builder)
        {
            builder.ToTable("HplCreateUserLogs", "dbo");
            builder.HasKey(x => x.NhanVienId);

            builder.Property(x => x.NhanVienId).HasColumnName(@"NhanVienId").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar(256)").IsRequired(false).HasMaxLength(256);
            builder.Property(x => x.LastName).HasColumnName(@"LastName").HasColumnType("nvarchar(256)").IsRequired(false).HasMaxLength(256);
            builder.Property(x => x.GioiTinh).HasColumnName(@"GioiTinh").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.MaNhanVien).HasColumnName(@"MaNhanVien").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.TenDangNhap).HasColumnName(@"TenDangNhap").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nvarchar(256)").IsRequired(false).HasMaxLength(256);
            builder.Property(x => x.EmailCaNhan).HasColumnName(@"EmailCaNhan").HasColumnType("nvarchar(256)").IsRequired(false).HasMaxLength(256);
            builder.Property(x => x.DienThoai).HasColumnName(@"DienThoai").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Cmtnd).HasColumnName(@"CMTND").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.TenChucVu).HasColumnName(@"TenChucVu").HasColumnType("nvarchar(256)").IsRequired(false).HasMaxLength(256);
            builder.Property(x => x.TenChucDanh).HasColumnName(@"TenChucDanh").HasColumnType("nvarchar(256)").IsRequired(false).HasMaxLength(256);
            builder.Property(x => x.PhongBanId).HasColumnName(@"PhongBanId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TenPhongBan).HasColumnName(@"TenPhongBan").HasColumnType("nvarchar(256)").IsRequired(false).HasMaxLength(256);
            builder.Property(x => x.MaPhongBan).HasColumnName(@"MaPhongBan").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.PhongBanCap1Id).HasColumnName(@"PhongBanCap1Id").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TenPhongBanCap1).HasColumnName(@"TenPhongBanCap1").HasColumnType("nvarchar(256)").IsRequired(false).HasMaxLength(256);
            builder.Property(x => x.MaPhongBanCap1).HasColumnName(@"MaPhongBanCap1").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.IsAd).HasColumnName(@"IsAd").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.IsHrm).HasColumnName(@"IsHrm").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.IsSaleOnline).HasColumnName(@"IsSaleOnline").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.IsEmail).HasColumnName(@"IsEmail").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.LinkHrm).HasColumnName(@"LinkHrm").HasColumnType("nvarchar(512)").IsRequired(false).HasMaxLength(512);
            builder.Property(x => x.LinkSaleOnline).HasColumnName(@"LinkSaleOnline").HasColumnType("nvarchar(512)").IsRequired(false).HasMaxLength(512);
            builder.Property(x => x.LinkEmail).HasColumnName(@"LinkEmail").HasColumnType("nvarchar(512)").IsRequired(false).HasMaxLength(512);
            builder.Property(x => x.DateCreated).HasColumnName(@"DateCreated").HasColumnType("datetime").IsRequired(false);
        }
    }

    // HplDeleteEmailDoTaoLoi
    public class HplDeleteEmailDoTaoLoiConfiguration : IEntityTypeConfiguration<HplDeleteEmailDoTaoLoi>
    {
        public void Configure(EntityTypeBuilder<HplDeleteEmailDoTaoLoi> builder)
        {
            builder.ToTable("HplDeleteEmailDoTaoLoi", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_HplDeleteEmailDoTaoLoi").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nvarchar(128)").IsRequired(false).HasMaxLength(128);
            builder.Property(x => x.DateCreated).HasColumnName(@"DateCreated").HasColumnType("datetime").IsRequired(false);
        }
    }

    // HplDisableUserLogs
    public class HplDisableUserLogConfiguration : IEntityTypeConfiguration<HplDisableUserLog>
    {
        public void Configure(EntityTypeBuilder<HplDisableUserLog> builder)
        {
            builder.ToTable("HplDisableUserLogs", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_HplDisableUserLogs").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.NhanVienId).HasColumnName(@"NhanVienId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.MaNhanVien).HasColumnName(@"MaNhanVien").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Ho).HasColumnName(@"Ho").HasColumnType("nvarchar(256)").IsRequired(false).HasMaxLength(256);
            builder.Property(x => x.Ten).HasColumnName(@"Ten").HasColumnType("nvarchar(128)").IsRequired(false).HasMaxLength(128);
            builder.Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nvarchar(128)").IsRequired(false).HasMaxLength(128);
            builder.Property(x => x.EmailCaNhan).HasColumnName(@"EmailCaNhan").HasColumnType("nvarchar(128)").IsRequired(false).HasMaxLength(128);
            builder.Property(x => x.DienThoai).HasColumnName(@"DienThoai").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Cmnd).HasColumnName(@"Cmnd").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.PhongBanId).HasColumnName(@"PhongBanId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.MaPhongBan).HasColumnName(@"MaPhongBan").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.TenPhongBan).HasColumnName(@"TenPhongBan").HasColumnType("nvarchar(256)").IsRequired(false).HasMaxLength(256);
            builder.Property(x => x.PhongBanCap1Id).HasColumnName(@"PhongBanCap1Id").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.MaPhongBanCap1).HasColumnName(@"MaPhongBanCap1").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.TenPhongBanCap1).HasColumnName(@"TenPhongBanCap1").HasColumnType("nvarchar(256)").IsRequired(false).HasMaxLength(256);
            builder.Property(x => x.DisableAd).HasColumnName(@"DisableAd").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DeleteEmail).HasColumnName(@"DeleteEmail").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.LockSaleOnline).HasColumnName(@"LockSaleOnline").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.LinkHrm).HasColumnName(@"LinkHrm").HasColumnType("nvarchar(512)").IsRequired(false).HasMaxLength(512);
            builder.Property(x => x.DateCreated).HasColumnName(@"DateCreated").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.JsonLog).HasColumnName(@"JsonLog").HasColumnType("ntext").IsRequired(false);
        }
    }

    // HplEmailCanXoa31082021
    public class HplEmailCanXoa31082021Configuration : IEntityTypeConfiguration<HplEmailCanXoa31082021>
    {
        public void Configure(EntityTypeBuilder<HplEmailCanXoa31082021> builder)
        {
            builder.ToTable("HplEmailCanXoa31082021", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_HplEmailCanXoa31082021").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nvarchar(500)").IsRequired().HasMaxLength(500);
            builder.Property(x => x.DateDeleted).HasColumnName(@"DateDeleted").HasColumnType("datetime").IsRequired();
        }
    }

    // HplPhongBans
    public class HplPhongBanConfiguration : IEntityTypeConfiguration<HplPhongBan>
    {
        public void Configure(EntityTypeBuilder<HplPhongBan> builder)
        {
            builder.ToTable("HplPhongBans", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_HplPhongBans").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.PhongBanId).HasColumnName(@"PhongBanId").HasColumnType("int").IsRequired();
            builder.Property(x => x.MaPhongBan).HasColumnName(@"MaPhongBan").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.PhongBanParentId).HasColumnName(@"PhongBanParentId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TenPhongBan).HasColumnName(@"TenPhongBan").HasColumnType("nvarchar(512)").IsRequired(false).HasMaxLength(512);
            builder.Property(x => x.CreationTime).HasColumnName(@"CreationTime").HasColumnType("datetime2").IsRequired(false);
            builder.Property(x => x.MailingList).HasColumnName(@"MailingList").HasColumnType("nvarchar(512)").IsRequired(false).HasMaxLength(512);
            builder.Property(x => x.LastSyncToAd).HasColumnName(@"LastSyncToAd").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.BranchId).HasColumnName(@"BranchID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.BranchCode).HasColumnName(@"BranchCode").HasColumnType("nvarchar(512)").IsRequired(false).HasMaxLength(512);
            builder.Property(x => x.BranchName).HasColumnName(@"BranchName").HasColumnType("nvarchar(512)").IsRequired(false).HasMaxLength(512);
            builder.Property(x => x.EmailNotification).HasColumnName(@"EmailNotification").HasColumnType("nvarchar(1024)").IsRequired(false).HasMaxLength(1024);
        }
    }

    // HplPhongBanFlattens
    public class HplPhongBanFlattenConfiguration : IEntityTypeConfiguration<HplPhongBanFlatten>
    {
        public void Configure(EntityTypeBuilder<HplPhongBanFlatten> builder)
        {
            builder.ToTable("HplPhongBanFlattens", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_PhongBanChilds").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.PhongBanId).HasColumnName(@"PhongBanId").HasColumnType("int").IsRequired();
            builder.Property(x => x.TenPhongBan).HasColumnName(@"TenPhongBan").HasColumnType("nvarchar(512)").IsRequired().HasMaxLength(512);
            builder.Property(x => x.MaPhongBan).HasColumnName(@"MaPhongBan").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.PhongBanChildId).HasColumnName(@"PhongBanChildId").HasColumnType("int").IsRequired();
            builder.Property(x => x.TenPhongBanChild).HasColumnName(@"TenPhongBanChild").HasColumnType("nvarchar(512)").IsRequired().HasMaxLength(512);
            builder.Property(x => x.MaPhongBanChild).HasColumnName(@"MaPhongBanChild").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DateModified).HasColumnName(@"DateModified").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.Depth).HasColumnName(@"Depth").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Path).HasColumnName(@"Path").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
        }
    }

    // HplSyncLogs
    public class HplSyncLogConfiguration : IEntityTypeConfiguration<HplSyncLog>
    {
        public void Configure(EntityTypeBuilder<HplSyncLog> builder)
        {
            builder.ToTable("HplSyncLogs", "dbo");
            builder.HasKey(x => x.LogId).HasName("PK_Hpl_Logs").IsClustered();

            builder.Property(x => x.LogId).HasColumnName(@"LogId").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.MaNhanVien).HasColumnName(@"MaNhanVien").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Payload).HasColumnName(@"Payload").HasColumnType("ntext").IsRequired(false);
            builder.Property(x => x.LogForSys).HasColumnName(@"LogForSys").HasColumnType("nvarchar(256)").IsRequired(false).HasMaxLength(256);
            builder.Property(x => x.DateCreate).HasColumnName(@"DateCreate").HasColumnType("datetime").IsRequired();
        }
    }

    // HplTestTable
    public class HplTestTableConfiguration : IEntityTypeConfiguration<HplTestTable>
    {
        public void Configure(EntityTypeBuilder<HplTestTable> builder)
        {
            builder.ToTable("HplTestTable", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_HplTestTable").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
        }
    }

    // UserAdInfo
    public class UserAdInfoConfiguration : IEntityTypeConfiguration<UserAdInfo>
    {
        public void Configure(EntityTypeBuilder<UserAdInfo> builder)
        {
            builder.ToTable("UserAdInfo", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_UserAdInfo").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.IsLocked).HasColumnName(@"isLocked").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.IsEnabled).HasColumnName(@"isEnabled").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Username).HasColumnName(@"Username").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.LastName).HasColumnName(@"LastName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DisplayName).HasColumnName(@"DisplayName").HasColumnType("nvarchar(256)").IsRequired(false).HasMaxLength(256);
            builder.Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nvarchar(512)").IsRequired(false).HasMaxLength(512);
            builder.Property(x => x.TelePhoneNumber).HasColumnName(@"TelePhoneNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeId").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar(256)").IsRequired(false).HasMaxLength(256);
            builder.Property(x => x.Department).HasColumnName(@"Department").HasColumnType("nvarchar(256)").IsRequired(false).HasMaxLength(256);
            builder.Property(x => x.OuName).HasColumnName(@"OuName").HasColumnType("nvarchar(256)").IsRequired(false).HasMaxLength(256);
            builder.Property(x => x.ContainerName).HasColumnName(@"ContainerName").HasColumnType("nvarchar(256)").IsRequired(false).HasMaxLength(256);
            builder.Property(x => x.MemberOf).HasColumnName(@"MemberOf").HasColumnType("nvarchar(256)").IsRequired(false).HasMaxLength(256);
            builder.Property(x => x.ObjectCategory).HasColumnName(@"ObjectCategory").HasColumnType("nvarchar(256)").IsRequired(false).HasMaxLength(256);
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(512)").IsRequired(false).HasMaxLength(512);
            builder.Property(x => x.MailFrozen).HasColumnName(@"MailFrozen").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.MailDisabled).HasColumnName(@"MailDisabled").HasColumnType("bit").IsRequired(false);
        }
    }


    #endregion

    #region Stored procedure return models

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class DashboardTrungThongTinHrmReturnModel
    {
        public int? TrungCmnd { get; set; }
        public int? TrungDienThoai { get; set; }
        public int? TrungEmail { get; set; }
        public int? TrungMaNhanVien { get; set; }
        public int? TrungUser { get; set; }
        public int? EmailKhongDung { get; set; }
    }

    public class GetAllLogNhanVienCreateReturnModel
    {
        public int NhanVienId { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string GioiTinh { get; set; }
        public string MaNhanVien { get; set; }
        public string TenDangNhap { get; set; }
        public string Email { get; set; }
        public string EmailCaNhan { get; set; }
        public string DienThoai { get; set; }
        public string CMTND { get; set; }
        public string TenChucVu { get; set; }
        public string TenChucDanh { get; set; }
        public int? PhongBanId { get; set; }
        public string TenPhongBan { get; set; }
        public string MaPhongBan { get; set; }
        public int? PhongBanCap1Id { get; set; }
        public string TenPhongBanCap1 { get; set; }
        public string MaPhongBanCap1 { get; set; }
        public string IsAd { get; set; }
        public string IsHrm { get; set; }
        public string IsSaleOnline { get; set; }
        public string IsEmail { get; set; }
        public string LinkHrm { get; set; }
        public string LinkSaleOnline { get; set; }
        public string LinkEmail { get; set; }
        public DateTime? DateCreated { get; set; }
    }

    public class GetAllLogNhanVienDisableReturnModel
    {
        public int Id { get; set; }
        public int? NhanVienId { get; set; }
        public string MaNhanVien { get; set; }
        public string UserName { get; set; }
        public string Ho { get; set; }
        public string Ten { get; set; }
        public string Email { get; set; }
        public string EmailCaNhan { get; set; }
        public string DienThoai { get; set; }
        public string Cmnd { get; set; }
        public int? PhongBanId { get; set; }
        public string MaPhongBan { get; set; }
        public string TenPhongBan { get; set; }
        public int? PhongBanCap1Id { get; set; }
        public string MaPhongBanCap1 { get; set; }
        public string TenPhongBanCap1 { get; set; }
        public string DisableAd { get; set; }
        public string DeleteEmail { get; set; }
        public string LockSaleOnline { get; set; }
        public string LinkHrm { get; set; }
        public DateTime? DateCreated { get; set; }
    }

    public class GetAllNhanVienDangLamChuaCoUserReturnModel
    {
        public int NhanVienId { get; set; }
        public string Ho { get; set; }
        public string HoTen { get; set; }
        public string GioiTinh { get; set; }
        public string MaNhanVien { get; set; }
        public string TenDangNhap { get; set; }
        public string Email { get; set; }
        public string EmailCaNhan { get; set; }
        public string DienThoai { get; set; }
        public string Cmnd { get; set; }
        public string TenChucVu { get; set; }
        public string TenChucDanh { get; set; }
        public int? PhongBanId { get; set; }
        public string TenPhongBan { get; set; }
        public string MaPhongBan { get; set; }
        public int? PhongBanCap1Id { get; set; }
        public string TenPhongBanCap1 { get; set; }
        public string MaPhongBanCap1 { get; set; }
        public string TrangThai { get; set; }
        public string NgayLamViec { get; set; }
        public string NgayNghiViec { get; set; }
        public string NgayTao { get; set; }
    }

    public class GetAllNhanVienNghiViecDaCoUserReturnModel
    {
        public int NhanVienId { get; set; }
        public string Ho { get; set; }
        public string HoTen { get; set; }
        public string GioiTinh { get; set; }
        public string MaNhanVien { get; set; }
        public string TenDangNhap { get; set; }
        public string Email { get; set; }
        public string EmailCaNhan { get; set; }
        public string DienThoai { get; set; }
        public string Cmnd { get; set; }
        public string TenChucVu { get; set; }
        public string TenChucDanh { get; set; }
        public int? PhongBanId { get; set; }
        public string TenPhongBan { get; set; }
        public string MaPhongBan { get; set; }
        public int? PhongBanCap1Id { get; set; }
        public string TenPhongBanCap1 { get; set; }
        public string MaPhongBanCap1 { get; set; }
        public string TrangThai { get; set; }
        public string NgayLamViec { get; set; }
        public string NgayNghiViec { get; set; }
        public string NgayTao { get; set; }
    }

    public class GetAllNhanVienNghiViecTheoNgayReturnModel
    {
        public int NhanVienId { get; set; }
        public string Ho { get; set; }
        public string HoTen { get; set; }
        public string GioiTinh { get; set; }
        public string MaNhanVien { get; set; }
        public string TenDangNhap { get; set; }
        public string Email { get; set; }
        public string EmailCaNhan { get; set; }
        public string DienThoai { get; set; }
        public string Cmnd { get; set; }
        public string TenChucVu { get; set; }
        public string TenChucDanh { get; set; }
        public int? PhongBanId { get; set; }
        public string TenPhongBan { get; set; }
        public string MaPhongBan { get; set; }
        public int? PhongBanCap1Id { get; set; }
        public string TenPhongBanCap1 { get; set; }
        public int? MaPhongBanCap1 { get; set; }
        public string TrangThai { get; set; }
        public string NgayLamViec { get; set; }
        public string NgayNghiViec { get; set; }
        public string NgayTao { get; set; }
    }

    public class GetAllNhanVienTheoListMaNvReturnModel
    {
        public int NhanVienId { get; set; }
        public string Ho { get; set; }
        public string HoTen { get; set; }
        public string HoVaTen { get; set; }
        public string GioiTinh { get; set; }
        public string MaNhanVien { get; set; }
        public string TenDangNhap { get; set; }
        public string Email { get; set; }
        public string EmailCaNhan { get; set; }
        public string DienThoai { get; set; }
        public string Cmnd { get; set; }
        public string TenChucVu { get; set; }
        public string TenChucDanh { get; set; }
        public int? PhongBanId { get; set; }
        public string TenPhongBan { get; set; }
        public string MaPhongBan { get; set; }
        public int? PhongBanCap1Id { get; set; }
        public string TenPhongBanCap1 { get; set; }
        public string MaPhongBanCap1 { get; set; }
        public string TrangThai { get; set; }
        public string NgayLamViec { get; set; }
        public string NgayNghiViec { get; set; }
        public string NgayTao { get; set; }
    }

    public class GetAllPhongBanConVaChinhNoByIdReturnModel
    {
        public int? PhongBanID { get; set; }
        public string MaPhongBan { get; set; }
        public string Ten { get; set; }
        public string TenPhongBanTA { get; set; }
        public string Keyword { get; set; }
        public string Mota { get; set; }
        public int? PhongBanChaID { get; set; }
        public long? ThuTu { get; set; }
        public string ChucNang { get; set; }
        public string NhiemVu { get; set; }
        public byte[] Icon { get; set; }
        public bool? IsDeleted { get; set; }
        public int? CongTyID { get; set; }
        public int? KhoiID { get; set; }
        public int? ChucVuLanhDaoID { get; set; }
        public DateTime? NgayHieuLuc { get; set; }
        public DateTime? NgayHetHieuLuc { get; set; }
        public string MaPBHoachToan { get; set; }
        public string MaChiNhanhHoachToan { get; set; }
        public int? CreatedByID { get; set; }
        public DateTime? CreatedDate { get; set; }
        public int? ModifyByID { get; set; }
        public DateTime? ModifyDate { get; set; }
        public int? Level { get; set; }
        public int? CapPhongBanID { get; set; }
        public string OrgPath { get; set; }
        public int? NguoiDuyetKHTD_SaleID { get; set; }
        public int? VungMienID { get; set; }
        public string Floor { get; set; }
        public string BudgetCode { get; set; }
        public int? NguoiQuanLyID { get; set; }
        public string TienToMaNhanVien { get; set; }
    }

    public class GetAllUserSystemsReturnModel
    {
        public int? NhanVienID { get; set; }
        public string Ho { get; set; }
        public string HoTen { get; set; }
        public string HoVaTen { get; set; }
        public string MaNhanVien { get; set; }
        public string TrangThai { get; set; }
        public string TenDangNhap { get; set; }
        public bool? Active { get; set; }
        public int? NguoiDungID { get; set; }
        public string Email { get; set; }
        public string DienThoai { get; set; }
        public string CMTND { get; set; }
        public int? PhongBanCap1Id { get; set; }
        public string TenPhongBanCap1 { get; set; }
        public string MaPhongBanCap1 { get; set; }
        public string NgayLamViec { get; set; }
        public string NgayNghiViec { get; set; }
        public string NgayTao { get; set; }
        public string SoUsername { get; set; }
        public bool? SoLock { get; set; }
        public string SoHoTen { get; set; }
        public string SoMaNhanVien { get; set; }
        public string SoEmail { get; set; }
        public string AdUsername { get; set; }
        public bool? AdEnabled { get; set; }
        public bool? MailFrozen { get; set; }
        public bool? MailDisabled { get; set; }
        public string AdHoTen { get; set; }
        public string AdEmail { get; set; }
        public string AdMaNhanVien { get; set; }
    }

    public class ListLuanChuyenCanBoReturnModel
    {
        public int NhanVienID { get; set; }
        public string HoVaTen { get; set; }
        public string MaNhanVien { get; set; }
        public string TrangThai { get; set; }
        public string TenDangNhap { get; set; }
        public string Email { get; set; }
        public string DienThoai { get; set; }
        public string CMTND { get; set; }
        public int? PhongBanCuId { get; set; }
        public string TenPhongBanCu { get; set; }
        public string MaPhongBanCu { get; set; }
        public int? PhongBanCuChildId { get; set; }
        public string TenPhongBanCuChild { get; set; }
        public string MaPhongBanCuChild { get; set; }
        public int? PhongBanMoiId { get; set; }
        public string TenPhongBanMoi { get; set; }
        public string MaPhongBanMoi { get; set; }
        public int? PhongBanMoiChildId { get; set; }
        public string TenPhongBanMoiChild { get; set; }
        public string MaPhongBanMoiChild { get; set; }
        public string NgayLamViec { get; set; }
        public string NgayChuyen { get; set; }
        public string NgayTao { get; set; }
    }

    public class NhanVienCoNhieuUserReturnModel
    {
        public int? NhanVienID { get; set; }
        public string HoVaTen { get; set; }
        public string MaNhanVien { get; set; }
        public string TrangThai { get; set; }
        public string TenDangNhap { get; set; }
        public bool? Active { get; set; }
        public string Email { get; set; }
        public string DienThoai { get; set; }
        public string CMTND { get; set; }
        public int? PhongBanCap1Id { get; set; }
        public string TenPhongBanCap1 { get; set; }
        public string MaPhongBanCap1 { get; set; }
        public string NgayLamViec { get; set; }
        public string NgayNghiViec { get; set; }
        public string NgayTao { get; set; }
    }

    public class NhanVienEmailKoDungReturnModel
    {
        public int NhanVienID { get; set; }
        public string HoVaTen { get; set; }
        public string MaNhanVien { get; set; }
        public string TrangThai { get; set; }
        public string TenDangNhap { get; set; }
        public bool? Active { get; set; }
        public string Email { get; set; }
        public string DienThoai { get; set; }
        public string CMTND { get; set; }
        public int? PhongBanCap1Id { get; set; }
        public string TenPhongBanCap1 { get; set; }
        public string MaPhongBanCap1 { get; set; }
        public string NgayLamViec { get; set; }
        public string NgayNghiViec { get; set; }
        public string NgayTao { get; set; }
    }

    public class NhanVienErrorUsernameReturnModel
    {
        public int NhanVienID { get; set; }
        public string HoVaTen { get; set; }
        public string MaNhanVien { get; set; }
        public string TrangThai { get; set; }
        public string TenDangNhap { get; set; }
        public bool? Active { get; set; }
        public string Email { get; set; }
        public string DienThoai { get; set; }
        public string CMTND { get; set; }
        public int? PhongBanCap1Id { get; set; }
        public string TenPhongBanCap1 { get; set; }
        public string MaPhongBanCap1 { get; set; }
        public string NgayLamViec { get; set; }
        public string NgayNghiViec { get; set; }
        public string NgayTao { get; set; }
    }

    public class NhanVienTrungCmndReturnModel
    {
        public int NhanVienID { get; set; }
        public string HoVaTen { get; set; }
        public string MaNhanVien { get; set; }
        public string TrangThai { get; set; }
        public string TenDangNhap { get; set; }
        public bool? Active { get; set; }
        public string Email { get; set; }
        public string DienThoai { get; set; }
        public string CMTND { get; set; }
        public int? PhongBanCap1Id { get; set; }
        public string TenPhongBanCap1 { get; set; }
        public string MaPhongBanCap1 { get; set; }
        public string NgayLamViec { get; set; }
        public string NgayNghiViec { get; set; }
        public string NgayTao { get; set; }
    }

    public class NhanVienTrungDienThoaiReturnModel
    {
        public int NhanVienID { get; set; }
        public string HoVaTen { get; set; }
        public string MaNhanVien { get; set; }
        public string TrangThai { get; set; }
        public string TenDangNhap { get; set; }
        public string Email { get; set; }
        public string DienThoai { get; set; }
        public string CMTND { get; set; }
        public int? PhongBanCap1Id { get; set; }
        public string TenPhongBanCap1 { get; set; }
        public string MaPhongBanCap1 { get; set; }
        public string NgayLamViec { get; set; }
        public string NgayNghiViec { get; set; }
        public string NgayTao { get; set; }
    }

    public class NhanVienTrungEmailReturnModel
    {
        public int NhanVienID { get; set; }
        public string HoVaTen { get; set; }
        public string MaNhanVien { get; set; }
        public string TrangThai { get; set; }
        public string TenDangNhap { get; set; }
        public string Email { get; set; }
        public string DienThoai { get; set; }
        public string CMTND { get; set; }
        public int? PhongBanCap1Id { get; set; }
        public string TenPhongBanCap1 { get; set; }
        public string MaPhongBanCap1 { get; set; }
        public string NgayLamViec { get; set; }
        public string NgayNghiViec { get; set; }
        public string NgayTao { get; set; }
    }

    public class NhanVienTrungMaNhanVienReturnModel
    {
        public int NhanVienID { get; set; }
        public string HoVaTen { get; set; }
        public string MaNhanVien { get; set; }
        public string TrangThai { get; set; }
        public string TenDangNhap { get; set; }
        public string Email { get; set; }
        public string DienThoai { get; set; }
        public string CMTND { get; set; }
        public int? PhongBanCap1Id { get; set; }
        public string TenPhongBanCap1 { get; set; }
        public string MaPhongBanCap1 { get; set; }
        public string NgayLamViec { get; set; }
        public string NgayNghiViec { get; set; }
        public string NgayTao { get; set; }
    }

    public class NhanVienTrungUserReturnModel
    {
        public int? NhanVienID { get; set; }
        public string HoVaTen { get; set; }
        public string MaNhanVien { get; set; }
        public string TrangThai { get; set; }
        public string TenDangNhap { get; set; }
        public int NguoiDungID { get; set; }
        public string Email { get; set; }
        public string DienThoai { get; set; }
        public string CMTND { get; set; }
        public int? PhongBanCap1Id { get; set; }
        public string TenPhongBanCap1 { get; set; }
        public string MaPhongBanCap1 { get; set; }
        public string NgayLamViec { get; set; }
        public string NgayNghiViec { get; set; }
        public string NgayTao { get; set; }
    }

    public class ThongKeTheoThangUserReturnModel
    {
        public int? Nam { get; set; }
        public int? Thang { get; set; }
        public string ThangNam { get; set; }
        public int? TotalNew { get; set; }
        public int? TotalDis { get; set; }
    }


    #endregion

}
// </auto-generated>
